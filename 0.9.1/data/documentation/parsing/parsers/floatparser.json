{"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"title":"Conforms To","type":"conformsTo"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FloatParser"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:SB","text":"BinaryFloatingPoint"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s25LosslessStringConvertibleP","text":"LosslessStringConvertible"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4UTF8a","text":"UTF8"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","text":"CodeUnit"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"text":"You will not typically need to interact with this type directly. Instead you will usually use","type":"text"},{"text":" ","type":"text"},{"text":"the static ","type":"text"},{"type":"codeVoice","code":"parser()"},{"text":" method on the ","type":"text"},{"type":"codeVoice","code":"BinaryFloatingPoint"},{"text":" of your choice, e.g.,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Double.parser()"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Float80.parser()"},{"text":", etc., all of which construct this type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","type":"reference","isActive":true},{"text":" for more information about this parser.","type":"text"}],"type":"paragraph"}]}],"metadata":{"extendedModule":"Parsing","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FloatParser"}],"roleHeading":"Structure","externalID":"s:7Parsing7ParsersO11FloatParserV","navigatorTitle":[{"kind":"identifier","text":"FloatParser"}],"modules":[{"name":"Parsing"}],"title":"Parsers.FloatParser","symbolKind":"struct"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser"},"abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a collection of UTF-8","type":"text"},{"text":" ","type":"text"},{"text":"code units.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/init()"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/parse(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/ParserPrinter-Implementations"],"title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/floatparser"]}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","kind":"article","title":"Float","url":"\/documentation\/parsing\/float","abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a string.","type":"text"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/FloatParser/Parser-Implementations":{"kind":"article","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/parsing\/parsers\/floatparser\/parser-implementations","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"role":"symbol","type":"topic","title":"Parsers","url":"\/documentation\/parsing\/parsers","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/FloatParser/init()":{"fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/init()","title":"init()","url":"\/documentation\/parsing\/parsers\/floatparser\/init()","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/FloatParser/parse(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"url":"\/documentation\/parsing\/parsers\/floatparser\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/parse(_:)","title":"parse(_:)","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/FloatParser":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FloatParser"}],"abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a collection of UTF-8","type":"text"},{"text":" ","type":"text"},{"text":"code units.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/parsing\/parsers\/floatparser","navigatorTitle":[{"kind":"identifier","text":"FloatParser"}],"title":"Parsers.FloatParser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"kind":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BinaryFloatingPoint"},{"type":"text","text":", "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"LosslessStringConvertible"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Input.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}]},"title":"ParserPrinter","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/FloatParser/ParserPrinter-Implementations":{"url":"\/documentation\/parsing\/parsers\/floatparser\/parserprinter-implementations","kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/FloatParser\/ParserPrinter-Implementations","role":"collectionGroup","title":"ParserPrinter Implementations"}}}