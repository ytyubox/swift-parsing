{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)"],"title":"Instance Methods"}],"kind":"symbol","metadata":{"role":"symbol","externalID":"s:7Parsing21PrependableCollectionP","roleHeading":"Protocol","modules":[{"name":"Parsing"}],"navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"title":"PrependableCollection","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/Sl","doc:\/\/co.pointfree.Parsing\/ST"],"type":"inheritsFrom","kind":"relationships","title":"Inherits From"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_EmptyInitializable"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"}],"languages":["swift"]}]},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"code":"PrependableCollection","type":"codeVoice"},{"type":"text","text":" is a specialized subset of "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":" that is tuned to"},{"type":"text","text":" "},{"type":"text","text":"incremental printing."}],"type":"paragraph"},{"inlineContent":[{"text":"In fact, any ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" can get a conformance for free:","type":"text"}],"type":"paragraph"},{"code":["extension MyRangeReplaceableCollection: PrependableCollection {}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Because it is also less strict than ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":", it is an appropriate protocol","type":"text"},{"text":" ","type":"text"},{"text":"to conform to for types that cannot and should not conform to ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" ","type":"text"},{"text":"directly.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":" is a common input for string parsers to parse from, but it","type":"text"},{"text":" ","type":"text"},{"text":"does not conform to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":". It does, however, conform to","type":"text"},{"text":" ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":" by validating and prepending the given UTF-8 bytes to its underlying","type":"text"},{"text":" ","type":"text"},{"text":"substring. So in order to write a parser against generic sequences of UTF-8 bytes, you would","type":"text"},{"text":" ","type":"text"},{"text":"constrain its input against ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example the following ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser is generic over an ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" of bytes, and its","type":"text"},{"text":" ","type":"text"},{"text":"printer conformance further constraints its input to be prependable.","type":"text"}],"type":"paragraph"},{"code":["struct Digits<Input: Collection>: Parser","where","  Input.Element == UTF8.CodeUnit,  \/\/ Required for working with a collection of bytes (`UInt8`)","  Input.SubSequence == Input       \/\/ Required for the parser to consume from input","{","  func parse(_ input: inout Input) throws -> Int {","    \/\/ Collect all bytes between ASCII \"0\" and \"9\"","    let prefix = input.prefix(while: { $0 >= .init(ascii: \"0\") && $0 <= .init(ascii: \"9\") })","","    \/\/ Attempt to convert to an `Int`","    guard let int = Int(prefix) else {","      struct ParseError: Error {}","      throw ParseError()","    }","","    \/\/ Incrementally consume bytes from input","    input.removeFirst(prefix.count)","","    return int","  }","}","","extension Digits: ParserPrinter where Input: PrependableCollection {","  func print(_ output: Int, into input: inout Input) {","    \/\/ Convert `Int` to string's underlying bytes","    let bytes = String(output).utf8","","    \/\/ Prepend bytes using `PrependableCollection` conformance.","    input.prepend(contentsOf: bytes)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Digits"},{"type":"text","text":" parser-printer now works on any collection of UTF-8 code units, including"},{"type":"text","text":" "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ArraySlice<UInt8>"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["var input = \"123\"[...].utf8","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(input) \/\/ \"123\""],"syntax":"swift","type":"codeListing"},{"code":["var input = ArraySlice(\"123\"[...].utf8)","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(decoding: input, as: UTF8.self) \/\/ \"123\""],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prependablecollection"]}],"sections":[],"references":{"doc://co.pointfree.Parsing/Sl":{"identifier":"doc:\/\/co.pointfree.Parsing\/Sl","title":"Swift.Collection","type":"unresolvable"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"abstract":[{"text":"A collection that supports empty initialization and the ability to prepend a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements of elements to itself.","type":"text"}],"title":"PrependableCollection","url":"\/documentation\/parsing\/prependablecollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection/prepend(contentsOf:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prepend","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","required":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)","url":"\/documentation\/parsing\/prependablecollection\/prepend(contentsof:)","title":"prepend(contentsOf:)","abstract":[{"type":"text","text":"Inserts the elements of a sequence or collection to the beginning of this collection."}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/init(_:)","url":"\/documentation\/parsing\/prependablecollection\/init(_:)","title":"init(_:)","abstract":[{"type":"text","text":"Creates a new instance of a collection containing the elements of a sequence."}],"type":"topic"},"doc://co.pointfree.Parsing/ST":{"identifier":"doc:\/\/co.pointfree.Parsing\/ST","title":"Swift.Sequence","type":"unresolvable"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection/prepend(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prepend","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","url":"\/documentation\/parsing\/prependablecollection\/prepend(_:)","title":"prepend(_:)","abstract":[{"type":"text","text":"Adds an element to the beginning of the collection."}],"type":"topic"}}}