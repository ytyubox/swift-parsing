{"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"Protocol","text":"Protocol","level":2},{"type":"paragraph","inlineContent":[{"text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine","type":"text"},{"text":" ","type":"text"},{"text":"framework. A parser is represented as a protocol that many types conform to, and then parser","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformations (also known as “combinators”) are methods that return concrete types conforming to"},{"type":"text","text":" "},{"type":"text","text":"the parser protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to parse all the characters from the beginning of a substring until you encounter a"},{"type":"text","text":" "},{"type":"text","text":"comma you can use the "},{"type":"codeVoice","code":"Prefix"},{"type":"text","text":" parser:"}]},{"type":"codeListing","code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of this parser is:"}]},{"type":"codeListing","code":["Prefix<Substring>"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We can ","type":"text"},{"code":".map","type":"codeVoice"},{"text":" on this parser in order to transform its output, which in this case is the string","type":"text"},{"text":" ","type":"text"},{"text":"“Hello”:","type":"text"}]},{"type":"codeListing","code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of this parser is now:"}]},{"type":"codeListing","code":["Parsers.Map<Prefix<Substring>, Substring>"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of"},{"type":"text","text":" "},{"type":"text","text":"complexity when using these types, but comes with some performance benefits because Swift can"},{"type":"text","text":" "},{"type":"text","text":"usually inline and optimize away the creation of those nested types."}]},{"type":"heading","anchor":"Result-Builders","text":"Result Builders","level":2},{"type":"paragraph","inlineContent":[{"text":"The library takes advantage of Swift’s ","type":"text"},{"code":"@resultBuilder","type":"codeVoice"},{"text":" feature to make constructing complex parsers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main"},{"type":"text","text":" "},{"type":"text","text":"entry point into building a parser is the "},{"type":"codeVoice","code":"Parse"},{"type":"text","text":" builder:"}]},{"type":"codeListing","code":["Parse {","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this builder block you can specify parsers that will be run one after another. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:"}]},{"type":"codeListing","code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type conforms to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" protocol, and represents a parser that","type":"text"},{"text":" ","type":"text"},{"text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many of the parsers and operators that come with the library are configured with parser builders"},{"type":"text","text":" "},{"type":"text","text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where"},{"type":"text","text":" "},{"type":"text","text":"parenthesized numbers are negative, we can use the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"type":"text","text":" parser builder:"}]},{"type":"codeListing","code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"],"syntax":"swift"},{"type":"heading","anchor":"Operators","text":"Operators","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parser operators (also called “combinators”) are methods defined on the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"type":"text","text":" protocol that"},{"type":"text","text":" "},{"type":"text","text":"return a parser. For example, the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","isActive":true,"type":"reference"},{"type":"text","text":" operator is a method that returns"},{"type":"text","text":" "},{"type":"text","text":"something called a "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","isActive":true,"type":"reference"},{"type":"text","text":":"}]},{"type":"codeListing","code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"type":"text","text":" is a dedicated type that implements the logic of the map operation. In"},{"type":"text","text":" "},{"type":"text","text":"particular, in runs the upstream parser and then transforms its output:"}]},{"type":"codeListing","code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Types that conform to the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" protocol but are not constructed directly, and instead are","type":"text"},{"text":" ","type":"text"},{"text":"constructed via operators, are housed in the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"reference","isActive":true},{"text":" type. It’s just an empty enum that","type":"text"},{"text":" ","type":"text"},{"text":"serves as a namespace for such parsers.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"variants":[{"paths":["\/documentation\/parsing\/design"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","metadata":{"roleHeading":"Article","title":"Design","role":"article","modules":[{"name":"Parsing"}]},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"role":"symbol","type":"topic","title":"Parsers","url":"\/documentation\/parsing\/parsers","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"url":"\/documentation\/parsing\/stringabstractions","type":"topic","kind":"article","role":"article","title":"String Abstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"type":"topic","title":"OneOf","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"kind":"symbol","url":"\/documentation\/parsing\/oneof","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article","type":"topic","url":"\/documentation\/parsing\/gettingstarted","kind":"article","title":"Getting Started"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","abstract":[{"text":"Returns a parser that transforms the output of this parser with a given closure.","type":"text"}],"role":"symbol","type":"topic","title":"map(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO3MapV","text":"Map"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"title":"Parsers.Map","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","navigatorTitle":[{"text":"Map","kind":"identifier"}],"url":"\/documentation\/parsing\/parsers\/map","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Map","kind":"identifier"}],"type":"topic","abstract":[{"text":"A parser that transforms the output of another parser with a given closure.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","role":"article","type":"topic","url":"\/documentation\/parsing\/errormessages","kind":"article","title":"Error Messages"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","role":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"title":"Backtracking","type":"topic","url":"\/documentation\/parsing\/backtracking","kind":"article"}}}