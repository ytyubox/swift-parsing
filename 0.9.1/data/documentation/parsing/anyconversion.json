{"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"This conversion forwards its ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"text":" and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"},{"text":" methods to an arbitrary","type":"text"},{"text":" ","type":"text"},{"text":"underlying conversion having the same ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" types, hiding the specifics of the","type":"text"},{"text":" ","type":"text"},{"text":"underlying ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"AnyConversion"},{"type":"text","text":" to wrap a conversion whose type has details you don’t want to expose across"},{"type":"text","text":" "},{"type":"text","text":"API boundaries, such as different modules. When you use type erasure this way, you can change"},{"type":"text","text":" "},{"type":"text","text":"the underlying conversion over time without affecting existing clients."}]},{"type":"paragraph","inlineContent":[{"code":"AnyConversion","type":"codeVoice"},{"text":" can also be useful for experimenting with ad hoc conversions in a lightweight","type":"text"},{"text":" ","type":"text"},{"text":"manner. One can avoid the upfront ceremony of defining a whole new type and instead create a","type":"text"},{"text":" ","type":"text"},{"text":"“conformance” inline by specifying the ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"unapply","type":"codeVoice"},{"text":" functions directly","type":"text"}]},{"code":["Prefix { $0.isNumber }","  .map(","    AnyConversion(","      apply: { Int(String($0)) },","      unapply: { String($0)[...] {","    )","  )","","\/\/ vs.","","struct SubstringToInt: Conversion {","  func apply(_ input: Substring) throws -> Int {","    guard let int = Int(String(input)) else {","      struct ConvertingError: Error {}","      throw ConvertingError()","    }","    return int","  }","","  func unapply(_ output: Int) -> Substring {","    String(output)[...]","  }","}","","Prefix { $0.isNumber }","  .map(SubstringToInt())"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If performance is a consideration of your parser-printer, you should avoid ","type":"text"},{"type":"codeVoice","code":"AnyConversion"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"text":"instead create custom types that conform to the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","isActive":true,"type":"reference"},{"text":" protocol.","type":"text"}]}],"kind":"content"}],"abstract":[{"text":"A type-erased ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"text":".","type":"text"}],"variants":[{"paths":["\/documentation\/parsing\/anyconversion"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"symbolKind":"struct","title":"AnyConversion","roleHeading":"Structure","role":"symbol","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing13AnyConversionV","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"],"generated":true,"title":"Default Implementations"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"role":"symbol","title":"Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can transform an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value back into an "},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"url":"\/documentation\/parsing\/conversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/anyconversion\/init(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(_:)","kind":"symbol","title":"init(_:)","abstract":[{"text":"Creates a type-erasing conversion to wrap the given conversion.","type":"text"}],"type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/apply(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}],"abstract":[{"type":"text","text":"Attempts to transform an input into an output."}],"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/anyconversion\/apply(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","title":"apply(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/unapply(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unapply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Input"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","url":"\/documentation\/parsing\/anyconversion\/unapply(_:)","role":"symbol","type":"topic","title":"unapply(_:)","abstract":[{"type":"text","text":"Attempts to transform an output back into an input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(apply:unapply:)":{"url":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)","kind":"symbol","abstract":[{"type":"text","text":"Creates a conversion that wraps the given closures in its "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"methods, throwing an error when "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is returned."}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"title":"init(apply:unapply:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/Conversion-Implementations":{"type":"topic","kind":"article","url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","title":"Conversion Implementations","abstract":[],"role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/anyconversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","title":"AnyConversion","abstract":[{"text":"A type-erased ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"text":".","type":"text"}],"role":"symbol"}}}