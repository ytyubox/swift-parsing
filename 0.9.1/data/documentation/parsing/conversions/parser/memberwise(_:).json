{"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Type Method","role":"symbol","title":"memberwise(_:)","symbolKind":"method","extendedModule":"Parsing","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO6ParserV","modules":[{"name":"Parsing"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"text":" == ","kind":"text"},{"text":"Conversions","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions"},{"text":".","kind":"text"},{"text":"Memberwise","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise"},{"text":"<","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A conversion that can embed a tuple of values into a struct, and destructure a"},{"type":"text","text":" "},{"type":"text","text":"struct back into a tuple of values."}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"text":"A memberwise initializer where ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" directly maps to the memory","type":"text"},{"text":" ","type":"text"},{"text":"layout of ","type":"text"},{"type":"codeVoice","code":"Root"},{"text":", for example the internal, default initializer that is automatically","type":"text"},{"text":" ","type":"text"},{"text":"synthesized for structs.","type":"text"}]}]}]},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"reference"},{"text":" into a struct.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, given a simple ","type":"text"},{"code":"Coordinate","type":"codeVoice"},{"text":" struct, we can build a parser-printer using","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)","type":"reference"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""]},{"inlineContent":[{"type":"text","text":"To transform the output of a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"type":"text","text":" into an enum, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Careful-usage","text":"Careful usage","type":"heading","level":2},{"inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)"},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"type":"codeVoice","code":"unsafeBitcast"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" valid to use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)"},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into","type":"text"},{"text":" ","type":"text"},{"text":"your parser-printer and potentially causing crashes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose we provided an alternative initializer to "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" above that"},{"type":"text","text":" "},{"type":"text","text":"allowed you to create a coordinate from a radius and angle measured in degrees:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"]},{"inlineContent":[{"text":"This may seem innocent enough, but it is ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" safe to use this initializer with","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)","type":"reference","isActive":true},{"text":". The following parser-printer will correctly parse a radius and angle into","type":"text"},{"text":" ","type":"text"},{"text":"an x\/y coordinate:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"]},{"inlineContent":[{"text":"However, printing a coordinate will ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" convert it back into a radius and angle, and","type":"text"},{"text":" ","type":"text"},{"text":"instead will erroneously use (0, 1) as the radius and angle:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""]},{"inlineContent":[{"type":"text","text":"This means this parser-printer does not round trip (see "},{"type":"text","text":"doc:Roundtripping"},{"type":"text","text":"), "},{"inlineContent":[{"text":"i.e.","type":"text"}],"type":"emphasis"},{"type":"text","text":" if we"},{"type":"text","text":" "},{"type":"text","text":"parse and input and then print that output we do not get back the original input we started"},{"type":"text","text":" "},{"type":"text","text":"with:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"]},{"inlineContent":[{"text":"Further, it is possible to provide a custom initializer for a type that either re-orders the","type":"text"},{"text":" ","type":"text"},{"text":"fields or add\/removes fields, both of which will cause the underlying ","type":"text"},{"type":"codeVoice","code":"unsafeBitCast"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"crash. For example, we could have a ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" struct that holds onto a string for the bio and an","type":"text"},{"text":" ","type":"text"},{"text":"integer for the id, and provide a custom initializer so that the id is provided first:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"]},{"inlineContent":[{"text":"However, using this initializer with ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)","isActive":true},{"text":" will cause printing to crash because","type":"text"},{"text":" ","type":"text"},{"text":"it will try to bitcast a ","type":"text"},{"code":"(String, Int)","type":"codeVoice"},{"text":" struct into a ","type":"text"},{"code":"(Int, String)","type":"codeVoice"},{"text":" tuple:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"]}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/Conversion-Implementations"]]},"variants":[{"paths":["\/documentation\/parsing\/conversions\/parser\/memberwise(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"title":"Conversions","url":"\/documentation\/parsing\/conversions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser","type":"topic","kind":"symbol","role":"symbol","title":"Conversions.Parser","url":"\/documentation\/parsing\/conversions\/parser","abstract":[{"text":"A conversion from a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"reference","isActive":true},{"type":"text","text":"’s input to its output."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"navigatorTitle":[{"text":"Memberwise","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/conversions\/memberwise","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","title":"Conversions.Memberwise","abstract":[],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Parser/memberwise(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/conversions\/parser\/memberwise(_:)","title":"memberwise(_:)","abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/memberwise(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/case(_:)-4j2n7":{"abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"type":"text","text":" "},{"type":"text","text":"associated values."}],"title":"case(_:)","type":"topic","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"url":"\/documentation\/parsing","kind":"symbol","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"role":"symbol","title":"ParserPrinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Parser/Conversion-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Parser\/Conversion-Implementations","type":"topic","kind":"article","role":"collectionGroup","title":"Conversion Implementations","url":"\/documentation\/parsing\/conversions\/parser\/conversion-implementations","abstract":[]}}}