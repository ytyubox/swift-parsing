{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/Conversion-Implementations"]]},"abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"symbolKind":"method","role":"symbol","extendedModule":"Parsing","roleHeading":"Type Method","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:9CasePaths0A4PathV","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"memberwise(_:)","modules":[{"name":"CasePaths"}]},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)"},"variants":[{"paths":["\/documentation\/casepaths\/casepath\/memberwise(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","preciseIdentifier":"s:7Parsing11ConversionsO","text":"Conversions"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","text":"Memberwise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conversion that can embed a tuple of values into a struct, and destructure a"},{"type":"text","text":" "},{"type":"text","text":"struct back into a tuple of values."}]}]},{"kind":"parameters","parameters":[{"name":"initializer","content":[{"inlineContent":[{"type":"text","text":"A memberwise initializer where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Root"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"code":"ParserPrinter","type":"codeVoice"},{"type":"text","text":" into a struct."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, given a simple ","type":"text"},{"type":"codeVoice","code":"Coordinate"},{"text":" struct, we can build a parser-printer using","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","isActive":true,"type":"reference"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"To transform the output of a ","type":"text"},{"type":"codeVoice","code":"ParserPrinter"},{"text":" into an enum, see ","type":"text"},{"type":"codeVoice","code":"Conversion\/case(_:)-4j2n7"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Careful-usage","text":"Careful usage","type":"heading","level":2},{"inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","isActive":true,"type":"reference"},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"code":"unsafeBitcast","type":"codeVoice"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" valid to use ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","isActive":true,"type":"reference"},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into","type":"text"},{"text":" ","type":"text"},{"text":"your parser-printer and potentially causing crashes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose we provided an alternative initializer to "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" above that"},{"type":"text","text":" "},{"type":"text","text":"allowed you to create a coordinate from a radius and angle measured in degrees:"}],"type":"paragraph"},{"code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This may seem innocent enough, but it is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" safe to use this initializer with","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","isActive":true},{"text":". The following parser-printer will correctly parse a radius and angle into","type":"text"},{"text":" ","type":"text"},{"text":"an x\/y coordinate:","type":"text"}],"type":"paragraph"},{"code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, printing a coordinate will "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" convert it back into a radius and angle, and"},{"type":"text","text":" "},{"type":"text","text":"instead will erroneously use (0, 1) as the radius and angle:"}],"type":"paragraph"},{"code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This means this parser-printer does not round trip (see ","type":"text"},{"text":"doc:Roundtripping","type":"text"},{"text":"), ","type":"text"},{"inlineContent":[{"text":"i.e.","type":"text"}],"type":"emphasis"},{"text":" if we","type":"text"},{"text":" ","type":"text"},{"text":"parse and input and then print that output we do not get back the original input we started","type":"text"},{"text":" ","type":"text"},{"text":"with:","type":"text"}],"type":"paragraph"},{"code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Further, it is possible to provide a custom initializer for a type that either re-orders the","type":"text"},{"text":" ","type":"text"},{"text":"fields or add\/removes fields, both of which will cause the underlying ","type":"text"},{"code":"unsafeBitCast","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"crash. For example, we could have a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct that holds onto a string for the bio and an","type":"text"},{"text":" ","type":"text"},{"text":"integer for the id, and provide a custom initializer so that the id is provided first:","type":"text"}],"type":"paragraph"},{"code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, using this initializer with "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","isActive":true,"type":"reference"},{"type":"text","text":" will cause printing to crash because"},{"type":"text","text":" "},{"type":"text","text":"it will try to bitcast a "},{"type":"codeVoice","code":"(String, Int)"},{"type":"text","text":" struct into a "},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":" tuple:"}],"type":"paragraph"},{"code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"syntax":"swift","type":"codeListing"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"navigatorTitle":[{"text":"Memberwise","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/parsing\/conversions\/memberwise","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","title":"Conversions.Memberwise","abstract":[],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/CasePaths":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","abstract":[],"type":"topic","url":"\/documentation\/casepaths","kind":"symbol","role":"collection","title":"CasePaths"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a root’s embedded","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"title":"CasePath","url":"\/documentation\/casepaths\/casepath","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CasePath","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/memberwise(_:)":{"title":"memberwise(_:)","abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","kind":"symbol","url":"\/documentation\/casepaths\/casepath\/memberwise(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/Conversion-Implementations":{"abstract":[],"type":"topic","url":"\/documentation\/casepaths\/casepath\/conversion-implementations","kind":"article","role":"collectionGroup","title":"Conversion Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/Conversion-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"title":"Conversions","url":"\/documentation\/parsing\/conversions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]}}}