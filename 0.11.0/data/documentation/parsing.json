{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"hierarchy":{"paths":[[]]},"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"topicSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]}],"variants":[{"paths":["\/documentation\/parsing"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"text":"Additional Resources","type":"heading","level":2,"anchor":"Additional-Resources"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Parsing with this library is performed by listing out many small parsers that describe how to"},{"type":"text","text":" "},{"type":"text","text":"incrementally consume small bits from the beginning of an input string. For example, suppose you"},{"type":"text","text":" "},{"type":"text","text":"have a string that holds some user data that you want to parse into an array of "},{"code":"User","type":"codeVoice"},{"type":"text","text":"s:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"]},{"inlineContent":[{"type":"text","text":"A parser can be constructed for transforming the input string into an array of users in succinct"},{"type":"text","text":" "},{"type":"text","text":"and fluent API:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"]},{"inlineContent":[{"type":"text","text":"This says that to parse a user we:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Parse and consume an integer from the beginning of the input","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then a comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then everything up to the next comma","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then another comma","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"and finally a boolean.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"And to parse an entire array of users we:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Run the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" parser many times"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"between each invocation of ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" we run the separator parser to consume a newline","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}]}]}]},{"inlineContent":[{"text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits","type":"text"},{"text":" ","type":"text"},{"text":"an error that describes exactly what went wrong:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""]},{"inlineContent":[{"text":"With a few small changes we can also turn this parser into a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks"},{"type":"text","text":" "},{"type":"text","text":"to learn in order to performantly parse larger inputs."}],"type":"paragraph"}]}],"metadata":{"externalID":"Parsing","role":"collection","title":"Parsing","symbolKind":"module","roleHeading":"Framework","modules":[{"name":"Parsing"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"abstract":[{"text":"The collection of videos from ","type":"text"},{"identifier":"https:\/\/www.pointfree.co","isActive":true,"type":"reference"},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"title":"Related Documentation","identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"]}],"references":{"https://github.com/pointfreeco/swift-parsing":{"title":"GitHub Repo","titleInlineContent":[{"text":"GitHub Repo","type":"text"}],"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","url":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"link"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"Conversion","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"title":"Parsers","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CountingRange"}],"url":"\/documentation\/parsing\/countingrange","role":"symbol","title":"CountingRange","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"CountingRange"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","title":"Conditional","role":"symbol","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"kind":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"url":"\/documentation\/parsing\/conditional"},"https://www.pointfree.co/collections/parsing":{"title":"Point-Free Videos","titleInlineContent":[{"text":"Point-Free Videos","type":"text"}],"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","url":"https:\/\/www.pointfree.co\/collections\/parsing","type":"link"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}],"url":"\/documentation\/parsing\/gettingstarted","title":"Getting Started","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","url":"\/documentation\/parsing\/stringabstractions","title":"String Abstractions","kind":"article","type":"topic","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"kind":"symbol","title":"Conversions","navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","type":"topic","url":"\/documentation\/parsing\/conversions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Conversions"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"role":"symbol","abstract":[],"kind":"symbol","title":"PrependableCollection","navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","type":"topic","url":"\/documentation\/parsing\/prependablecollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}]},"https://github.com/pointfreeco/swift-parsing/discussions":{"title":"Discussions","titleInlineContent":[{"text":"Discussions","type":"text"}],"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"link"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"type":"topic","title":"Backtracking","kind":"article","url":"\/documentation\/parsing\/backtracking","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"kind":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"title":"ParserBuilder","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","url":"\/documentation\/parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","navigatorTitle":[{"text":"ParsePrint","kind":"identifier"}],"role":"symbol","abstract":[{"text":"An entry to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},{"text":" syntax that requires the builder to be a printer.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParsePrint","kind":"identifier"}],"url":"\/documentation\/parsing\/parseprint","title":"ParsePrint"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error Messages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"role":"article","url":"\/documentation\/parsing\/errormessages","kind":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"url":"\/documentation\/parsing\/design","title":"Design","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" from "},{"code":"Input","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","url":"\/documentation\/parsing\/anyparserprinter","title":"AnyParserPrinter","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParserPrinter"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyParserPrinter"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}],"role":"symbol","title":"AnyConversion","url":"\/documentation\/parsing\/anyconversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyConversion"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"role":"symbol","kind":"symbol","title":"ParserPrinter","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","url":"\/documentation\/parsing\/parserprinter","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"abstract":[]}}}