{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This conversion forwards its "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","type":"reference","isActive":true},{"type":"text","text":" methods to an arbitrary"},{"type":"text","text":" "},{"type":"text","text":"underlying conversion having the same "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types, hiding the specifics of the"},{"type":"text","text":" "},{"type":"text","text":"underlying "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"AnyConversion"},{"type":"text","text":" to wrap a conversion whose type has details you don’t want to expose across"},{"type":"text","text":" "},{"type":"text","text":"API boundaries, such as different modules. When you use type erasure this way, you can change"},{"type":"text","text":" "},{"type":"text","text":"the underlying conversion over time without affecting existing clients."}]},{"type":"paragraph","inlineContent":[{"code":"AnyConversion","type":"codeVoice"},{"type":"text","text":" can also be useful for experimenting with ad hoc conversions in a lightweight"},{"type":"text","text":" "},{"type":"text","text":"manner. One can avoid the upfront ceremony of defining a whole new type and instead create a"},{"type":"text","text":" "},{"type":"text","text":"“conformance” inline by specifying the "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" and "},{"code":"unapply","type":"codeVoice"},{"type":"text","text":" functions directly"}]},{"type":"codeListing","syntax":"swift","code":["Prefix { $0.isNumber }","  .map(","    AnyConversion(","      apply: { Int(String($0)) },","      unapply: { String($0)[...] {","    )","  )","","\/\/ vs.","","struct SubstringToInt: Conversion {","  func apply(_ input: Substring) throws -> Int {","    guard let int = Int(String(input)) else {","      struct ConvertingError: Error {}","      throw ConvertingError()","    }","    return int","  }","","  func unapply(_ output: Int) -> Substring {","    String(output)[...]","  }","}","","Prefix { $0.isNumber }","  .map(SubstringToInt())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If performance is a consideration of your parser-printer, you should avoid "},{"code":"AnyConversion","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"instead create custom types that conform to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"type":"text","text":" protocol."}]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"],"title":"Default Implementations","generated":true}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion"},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyconversion"]}],"abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"text":".","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"externalID":"s:7Parsing13AnyConversionV","modules":[{"name":"Parsing"}],"symbolKind":"struct","title":"AnyConversion","roleHeading":"Structure","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}],"role":"symbol","title":"AnyConversion","url":"\/documentation\/parsing\/anyconversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyConversion"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"Conversion","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(_:)":{"type":"topic","title":"init(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","abstract":[{"text":"Creates a type-erasing conversion to wrap the given conversion.","type":"text"}],"url":"\/documentation\/parsing\/anyconversion\/init(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(apply:unapply:)":{"url":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)","title":"init(apply:unapply:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?)"}],"abstract":[{"text":"Creates a conversion that wraps the given closures in its ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"methods, throwing an error when "},{"code":"nil","type":"codeVoice"},{"text":" is returned.","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","url":"\/documentation\/parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/apply(_:)":{"abstract":[],"title":"apply(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/parsing\/anyconversion\/apply(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/Conversion-Implementations":{"abstract":[],"role":"collectionGroup","title":"Conversion Implementations","url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/unapply(_:)":{"title":"unapply(_:)","url":"\/documentation\/parsing\/anyconversion\/unapply(_:)","abstract":[],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unapply","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}]}}}