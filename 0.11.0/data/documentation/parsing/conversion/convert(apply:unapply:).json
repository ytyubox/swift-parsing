{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"AnyConversion","preciseIdentifier":"s:7Parsing13AnyConversionV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion"},{"text":"<","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A closure that attempts to convert an input into an output. "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/apply(_:)"},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}],"type":"paragraph"}],"name":"apply"},{"content":[{"inlineContent":[{"type":"text","text":"A closure that attempts to convert an output into an input. "},{"type":"codeVoice","code":"unapply"},{"type":"text","text":" is executed"},{"type":"text","text":" "},{"type":"text","text":"each time the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/unapply(_:)"},{"type":"text","text":" method is called on the resulting conversion. If the closure"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", an error is thrown. Otherwise, the value is unwrapped."}],"type":"paragraph"}],"name":"unapply"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"A conversion that invokes the given apply and unapply functions."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for experimenting with conversions in a lightweight manner, without the ceremony of"},{"type":"text","text":" "},{"type":"text","text":"defining a dedicated type."}]},{"type":"codeListing","code":["struct Amount {","  var cents: Int","}","","let amount = Parse(","  .convert(","    apply: { dollars, cents in Amount(cents: dollars * 100 + cents) },","    unapply: { amount in amount.cents.quotientAndRemainder(dividingBy: 100) }","  )",") {","  Digits()","  \".\"","  Digits(2)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If performance is a concern, you should define a custom type that conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"type":"text","text":" "},{"type":"text","text":"instead, which avoids the overhead of escaping closures, gives the compiler the ability to"},{"type":"text","text":" "},{"type":"text","text":"better optimize, and puts your in a better position to test the conversion."}]},{"type":"codeListing","code":["struct AmountConversion: Conversion {","  func apply(_ dollarsAndCents: (Int, Int)) -> Amount {","    return Amount(cents: dollarsAndCents.0 * 100 + dollarsAndCents.1)","  }","","  func unapply(_ amount: Amount) -> (Int, Int) {","    amount.cents.quotientAndRemainder(dividingBy: 100)","  }","}","","let amount = Parse(AmountConversion()) {","  Digits()","  \".\"","  Digits(2)","}"],"syntax":"swift"}]}],"metadata":{"roleHeading":"Type Method","symbolKind":"method","externalID":"s:7Parsing10ConversionPAAE7convert5apply7unapplyAA03AnyB0Vyqd__qd_0_Gqd_0_Sgqd__c_qd__Sgqd_0_ctAIRszr0_lFZ","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"extendedModule":"Parsing","role":"symbol","modules":[{"name":"Parsing"}],"title":"convert(apply:unapply:)"},"abstract":[{"text":"A conversion that invokes the given apply and unapply functions.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conversion\/convert(apply:unapply:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/convert(apply:unapply:)"},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/convert(apply:unapply:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/convert(apply:unapply:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"convert","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"unapply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/parsing\/conversion\/convert(apply:unapply:)","type":"topic","abstract":[{"text":"A conversion that invokes the given apply and unapply functions.","type":"text"}],"title":"convert(apply:unapply:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","url":"\/documentation\/parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"Conversion","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}],"role":"symbol","title":"AnyConversion","url":"\/documentation\/parsing\/anyconversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyConversion"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/unapply(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unapply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"}],"role":"symbol","required":true,"kind":"symbol","title":"unapply(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/unapply(_:)","url":"\/documentation\/parsing\/conversion\/unapply(_:)","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/apply(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"role":"symbol","required":true,"kind":"symbol","title":"apply(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/apply(_:)","url":"\/documentation\/parsing\/conversion\/apply(_:)","abstract":[]}}}