{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parser\/parse(_:)-2wzcq"]}],"seeAlsoSections":[{"title":"Running a parser","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-717qw","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"StringProtocol","preciseIdentifier":"s:Sy"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UTF8View"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A nebulous collection of data to be parsed.","type":"text"}],"type":"paragraph"}],"name":"input"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"A more well-structured value parsed from the given input.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"Rather than having to create a mutable UTF-8 value and feed it to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true},{"text":" ","type":"text"},{"text":"method like this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"123,true\"[...].utf8","let output = try Parse {","  Int.parser()","  \",\".utf8","  Bool.parser()","}",".parse(&input) \/\/ (123, true)"]},{"inlineContent":[{"type":"text","text":"You can just feed a plain "},{"type":"codeVoice","code":"String"},{"type":"text","text":" input directly:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let output = try Parse {","  Int.parser()","  \",\".utf8","  Bool.parser()","}",".parse(\"123,true\") \/\/ (123, true)"]},{"inlineContent":[{"text":"This method will fail if the parser does not consume the entirety of the input.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let output = try Parse {","  Int.parser()","  \",\".utf8","  Bool.parser()","}",".parse(\"123,true    \")","","\/\/ error: unexpected input","\/\/  --> input:1:9","\/\/ 1 | 123,true␣␣␣␣","\/\/   |         ^ expected end of input"]},{"name":"Tip","content":[{"inlineContent":[{"type":"text","text":"If your input can have trailing whitespace that you would like to consume and discard"},{"type":"text","text":" "},{"type":"text","text":"you can do so like this:"}],"type":"paragraph"},{"syntax":"swift","code":["let output = try Parse {"," Int.parser()"," \",\".utf8"," Bool.parser()"," Whitespace()","}",".parse(\"123,true    \") \/\/ (123, true)"],"type":"codeListing"}],"type":"aside","style":"tip"}]}],"abstract":[{"text":"Parse a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" into an output using a UTF-8 parser. This method is more ergnomic to use","type":"text"},{"text":" ","type":"text"},{"text":"than ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true,"type":"reference"},{"text":" because it accepts a plain string rather than a collection of","type":"text"},{"text":" ","type":"text"},{"text":"UTF-8 code units, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"metadata":{"externalID":"s:7Parsing6ParserPAAE5parsey6OutputQzqd__KSyRd__11SubSequence_8UTF8ViewQYd__5InputRtzlF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"modules":[{"name":"Parsing"}],"title":"parse(_:)","roleHeading":"Instance Method","extendedModule":"Parsing","symbolKind":"method","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser/parse(_:)-2wzcq":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Parse a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" into an output using a UTF-8 parser. This method is more ergnomic to use"},{"type":"text","text":" "},{"type":"text","text":"than "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"reference","isActive":true},{"type":"text","text":" because it accepts a plain string rather than a collection of"},{"type":"text","text":" "},{"type":"text","text":"UTF-8 code units, and the input does not need to be "},{"type":"codeVoice","code":"inout"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq","title":"parse(_:)","type":"topic","role":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-2wzcq"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/parse(_:)-76tcw":{"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","required":true,"role":"symbol","defaultImplementations":3,"url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw","title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","url":"\/documentation\/parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"Parser","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/parse(_:)-717qw":{"abstract":[{"type":"text","text":"Parse an input value into an output. This method is more ergonomic to use than"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true},{"type":"text","text":" because the input does not need to be inout."}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-717qw","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-717qw","title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/parse(_:)-6h1d0":{"url":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Parse a collection into an output using a parser that works on the collection’s "},{"code":"SubSequence","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method is more ergnomic to use than "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"reference"},{"type":"text","text":" because it accepts a"},{"type":"text","text":" "},{"type":"text","text":"collection directly rather than its subsequence, and the input does not need to be "},{"code":"inout","type":"codeVoice"},{"type":"text","text":"."}],"title":"parse(_:)"}}}