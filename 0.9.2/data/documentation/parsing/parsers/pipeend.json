{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PipeEnd"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"}]}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/PipeEnd\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/PipeEnd\/Parser-Implementations"],"generated":true}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"extendedModule":"Parsing","modules":[{"name":"Parsing"}],"navigatorTitle":[{"text":"PipeEnd","kind":"identifier"}],"title":"Parsers.PipeEnd","roleHeading":"Structure","externalID":"s:7Parsing7ParsersO7PipeEndV","role":"symbol","symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PipeEnd","kind":"identifier"}]},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/PipeEnd"},"variants":[{"paths":["\/documentation\/parsing\/parsers\/pipeend"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/PipeEnd/parse(_:)":{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"parse(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/PipeEnd\/parse(_:)","url":"\/documentation\/parsing\/parsers\/pipeend\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/PipeEnd":{"title":"Parsers.PipeEnd","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PipeEnd","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/PipeEnd","url":"\/documentation\/parsing\/parsers\/pipeend","role":"symbol","navigatorTitle":[{"text":"PipeEnd","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"url":"\/documentation\/parsing\/parsers","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/PipeEnd/Parser-Implementations":{"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/PipeEnd\/Parser-Implementations","type":"topic","url":"\/documentation\/parsing\/parsers\/pipeend\/parser-implementations","role":"collectionGroup","kind":"article","title":"Parser Implementations"}}}