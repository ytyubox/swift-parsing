{"metadata":{"title":"eraseToAnyParser()","extendedModule":"Parsing","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing9AnyParserV","text":"AnyParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"role":"symbol","roleHeading":"Instance Method","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6ParserPAAE010eraseToAnyB0AA0eB0Vy5InputQz6OutputQzGyF::SYNTHESIZED::s:7Parsing7ParsersO11MapConstantV"},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eraseToAnyParser","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing9AnyParserV","text":"AnyParser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","type":"reference"},{"type":"text","text":" wrapping this parser."}]}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"This form of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type erasure","type":"text"}]},{"text":" preserves abstraction across API boundaries, such as different","type":"text"},{"text":" ","type":"text"},{"text":"modules.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you expose your composed parsers as the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","isActive":true,"type":"reference"},{"text":" type, you can change the underlying","type":"text"},{"text":" ","type":"text"},{"text":"implementation over time without affecting existing clients.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Equivalent to passing "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to "},{"type":"codeVoice","code":"AnyParser.init"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant\/eraseToAnyParser()","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant\/Parser-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/mapconstant\/erasetoanyparser()"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/MapConstant/eraseToAnyParser()":{"url":"\/documentation\/parsing\/parsers\/mapconstant\/erasetoanyparser()","title":"eraseToAnyParser()","abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant\/eraseToAnyParser()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7Parsing9AnyParserV","kind":"typeIdentifier","text":"AnyParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"title":"AnyParser","abstract":[{"type":"text","text":"A type-erased parser of "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from "},{"type":"codeVoice","code":"Input"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","url":"\/documentation\/parsing\/anyparser","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"url":"\/documentation\/parsing\/parsers","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/MapConstant":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant","navigatorTitle":[{"text":"MapConstant","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MapConstant","kind":"identifier"}],"title":"Parsers.MapConstant","url":"\/documentation\/parsing\/parsers\/mapconstant","abstract":[{"type":"text","text":"A parser that replaces another parserâ€™s "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" output with some new output."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/MapConstant/Parser-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant\/Parser-Implementations","type":"topic","title":"Parser Implementations","url":"\/documentation\/parsing\/parsers\/mapconstant\/parser-implementations","kind":"article","abstract":[]}}}