{"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This conversion forwards its "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","type":"reference","isActive":true},{"type":"text","text":" methods to an arbitrary"},{"type":"text","text":" "},{"type":"text","text":"underlying conversion having the same "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" types, hiding the specifics of the"},{"text":" ","type":"text"},{"text":"underlying ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"AnyConversion"},{"text":" to wrap a conversion whose type has details you don’t want to expose across","type":"text"},{"text":" ","type":"text"},{"text":"API boundaries, such as different modules. When you use type erasure this way, you can change","type":"text"},{"text":" ","type":"text"},{"text":"the underlying conversion over time without affecting existing clients.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"AnyConversion","type":"codeVoice"},{"text":" can also be useful for experimenting with ad hoc conversions in a lightweight","type":"text"},{"text":" ","type":"text"},{"text":"manner. One can avoid the upfront ceremony of defining a whole new type and instead create a","type":"text"},{"text":" ","type":"text"},{"text":"“conformance” inline by specifying the ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"unapply","type":"codeVoice"},{"text":" functions directly","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Prefix { $0.isNumber }","  .map(","    AnyConversion(","      apply: { Int(String($0)) },","      unapply: { String($0)[...] {","    )","  )","","\/\/ vs.","","struct SubstringToInt: Conversion {","  func apply(_ input: Substring) throws -> Int {","    guard let int = Int(String(input)) else {","      struct ConvertingError: Error {}","      throw ConvertingError()","    }","    return int","  }","","  func unapply(_ output: Int) -> Substring {","    String(output)[...]","  }","}","","Prefix { $0.isNumber }","  .map(SubstringToInt())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If performance is a consideration of your parser-printer, you should avoid "},{"code":"AnyConversion","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"instead create custom types that conform to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"type":"text","text":" protocol."}]}]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)"]},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"],"generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyconversion"]}],"abstract":[{"type":"text","text":"A type-erased "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"type":"text","text":"."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"externalID":"s:7Parsing13AnyConversionV","modules":[{"name":"Parsing"}],"symbolKind":"struct","title":"AnyConversion","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"roleHeading":"Structure","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"title":"Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"abstract":[{"type":"text","text":"Declares a type that can transform an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value back into an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/unapply(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unapply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Input"}],"abstract":[{"text":"Attempts to transform an output back into an input.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/anyconversion\/unapply(_:)","title":"unapply(_:)","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type-erased ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":"."}],"type":"topic","role":"symbol","title":"AnyConversion","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","url":"\/documentation\/parsing\/anyconversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(apply:unapply:)":{"url":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)","type":"topic","title":"init(apply:unapply:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"apply","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?)"}],"kind":"symbol","abstract":[{"text":"Creates a conversion that wraps the given closures in its ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/unapply(_:)"},{"type":"text","text":" "},{"type":"text","text":"methods, throwing an error when "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is returned."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/apply(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/apply(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}],"abstract":[{"text":"Attempts to transform an input into an output.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/anyconversion\/apply(_:)","title":"apply(_:)","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/init(_:)":{"kind":"symbol","abstract":[{"text":"Creates a type-erasing conversion to wrap the given conversion.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/init(_:)","title":"init(_:)","role":"symbol","url":"\/documentation\/parsing\/anyconversion\/init(_:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/Conversion-Implementations":{"abstract":[],"type":"topic","kind":"article","title":"Conversion Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","role":"collectionGroup"}}}