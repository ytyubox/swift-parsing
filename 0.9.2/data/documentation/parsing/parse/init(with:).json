{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse\/init(with:)"},"abstract":[{"type":"text","text":"An entry point into "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true,"type":"reference"},{"type":"text","text":" syntax."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"build"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser builder that will accumulate non-void outputs in a tuple."}]}],"name":"with"}],"kind":"parameters"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Used to combine the non-void outputs from multiple parsers into a single output by running","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each parser in sequence and bundling the results up into a tuple."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following parser parses a double, skips a comma, and then parses another"},{"type":"text","text":" "},{"type":"text","text":"double before returning a tuple of each double."}]},{"syntax":"swift","type":"codeListing","code":["let coordinate = Parse {","  Double.parser()","  \",\"","  Double.parser()","}","","try coordinate.parse(\"1,2\")  \/\/ (1.0, 2.0)"]}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parse\/init(with:)"]}],"metadata":{"title":"init(with:)","externalID":"s:7Parsing5ParseV4withACyxGxyXE_tcfc","symbolKind":"init","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","roleHeading":"Initializer","modules":[{"name":"Parsing"}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"type":"topic","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"title":"Parse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"url":"\/documentation\/parsing\/parse","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"title":"ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse/init(with:)":{"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/parsing\/parse\/init(with:)","kind":"symbol","abstract":[{"text":"An entry point into ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true,"type":"reference"},{"text":" syntax.","type":"text"}],"title":"init(with:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse\/init(with:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"}}}