{"metadata":{"extendedModule":"Parsing","title":"filter(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"externalID":"s:7Parsing6ParserPAAE6filteryAA7ParsersO6FilterVy_xGSb6OutputQzcF::SYNTHESIZED::s:7Parsing13ParserBuilderO9ZipOVOVOOV","modules":[{"name":"Parsing"}],"roleHeading":"Instance Method","role":"symbol","symbolKind":"method"},"sections":[],"abstract":[{"text":"Returns a parser that filters output from this parser when its output does not satisfy the","type":"text"},{"text":" ","type":"text"},{"text":"given predicate.","type":"text"}],"variants":[{"paths":["\/documentation\/parsing\/parserbuilder\/zipovovoo\/filter(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO6FilterV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","kind":"typeIdentifier","text":"Filter"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"A parser that filters its output.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"content":[{"inlineContent":[{"text":"A closure that takes an output from this parser and returns a Boolean","type":"text"},{"text":" ","type":"text"},{"text":"value indicating whether the output should be returned.","type":"text"}],"type":"paragraph"}],"name":"predicate"}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is similar to "},{"code":"Sequence.filter","type":"codeVoice"},{"type":"text","text":" in the Swift standard library, as well as"},{"type":"text","text":" "},{"code":"Publisher.filter","type":"codeVoice"},{"type":"text","text":" in the Combine framework."}]},{"type":"paragraph","inlineContent":[{"text":"This parser fails if the predicate is not satisfied on the output of the upstream parser. For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following parser consumes only even integers and so fails when an odd integer is used:","type":"text"}]},{"syntax":"swift","code":["var input = \"43 Hello, world!\"[...]","let number = try Int.parser().filter { $0.isMultiple(of: 2) }.parse(&input)","\/\/ error: processed value 43 failed to satisfy predicate","\/\/  --> input:1:1-2","\/\/ 1 | 43 Hello, world!","\/\/   | ^^ processed input"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOVOVOO\/filter(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOVOVOO","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOVOVOO\/Parser-Implementations"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipOVOVOO":{"abstract":[],"kind":"symbol","role":"symbol","title":"ParserBuilder.ZipOVOVOO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOVOVOO","url":"\/documentation\/parsing\/parserbuilder\/zipovovoo","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ZipOVOVOO"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ZipOVOVOO"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipOVOVOO/Parser-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOVOVOO\/Parser-Implementations","url":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/parser-implementations","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"url":"\/documentation\/parsing\/parsers","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipOVOVOO/filter(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"filter(_:)","type":"topic","url":"\/documentation\/parsing\/parserbuilder\/zipovovoo\/filter(_:)","abstract":[{"text":"Returns a parser that filters output from this parser when its output does not satisfy the","type":"text"},{"text":" ","type":"text"},{"text":"given predicate.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOVOVOO\/filter(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter":{"kind":"symbol","abstract":[{"type":"text","text":"A parser that filters the output of an upstream parser when it does not satisfy a predicate."}],"navigatorTitle":[{"text":"Filter","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Filter","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/parsers\/filter","title":"Parsers.Filter","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"type":"topic","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"title":"Parse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"url":"\/documentation\/parsing\/parse","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"title":"ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"topic","kind":"symbol","role":"symbol"}}}