{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVOOO","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVOOO\/Parser-Implementations"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","text":"CompactMap"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"A parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given transformation","type":"text"},{"text":" ","type":"text"},{"text":"with the output of this parser.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that accepts output of this parser as its argument and"},{"type":"text","text":" "},{"type":"text","text":"returns an optional value."}]}]}],"kind":"parameters"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This method is similar to ","type":"text"},{"code":"Sequence.compactMap","type":"codeVoice"},{"text":" in the Swift standard library, as well as","type":"text"},{"text":" ","type":"text"},{"code":"Publisher.compactMap","type":"codeVoice"},{"text":" in the Combine framework.","type":"text"}]},{"code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) ? $0 : nil }","","var input = \"124 hello world\"[...]","try evenParser.parse(&input)  \/\/ 124","input                         \/\/ \" hello world\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser fails when the provided closure returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For example, the following parser tries"},{"type":"text","text":" "},{"type":"text","text":"to convert two characters into a hex digit, but fails to do so because "},{"type":"codeVoice","code":"\"GG\""},{"type":"text","text":" is not a valid"},{"type":"text","text":" "},{"type":"text","text":"hex number:"}]},{"code":["var input = \"GG0000\"[...]","let hex = try Prefix(2).compactMap { Int(String($0), radix: 16) }.parse(&input)","\/\/ error: failed to process \"Int\" from \"GG\"","\/\/  --> input:1:1-2","\/\/ 1 | GG0000","\/\/   | ^^"],"type":"codeListing","syntax":"swift"},{"anchor":"Printability","type":"heading","level":2,"text":"Printability"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Parser.compactMap"},{"type":"text","text":" is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" printable, as a failable transform operation to some new output"},{"type":"text","text":" "},{"type":"text","text":"does not provide enough information to perform a transformation from that new output back to"},{"type":"text","text":" "},{"type":"text","text":"the old."}]},{"type":"paragraph","inlineContent":[{"text":"If you are building a parser-printer, avoid uses of ","type":"text"},{"type":"codeVoice","code":"compactMap"},{"text":" and instead use","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-18m9d"},{"text":" with a failable ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}]}],"kind":"content"}],"sections":[],"metadata":{"title":"compactMap(_:)","extendedModule":"Parsing","roleHeading":"Instance Method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"CompactMap","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:7Parsing13ParserBuilderO9ZipVVVOOOV","symbolKind":"method"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVOOO\/compactMap(_:)"},"variants":[{"paths":["\/documentation\/parsing\/parserbuilder\/zipvvvooo\/compactmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CompactMap":{"type":"topic","navigatorTitle":[{"text":"CompactMap","kind":"identifier"}],"title":"Parsers.CompactMap","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompactMap","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given transformation with the output","type":"text"},{"text":" ","type":"text"},{"text":"of its upstream parser.","type":"text"}],"url":"\/documentation\/parsing\/parsers\/compactmap","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-18m9d":{"type":"topic","title":"map(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"MapConversion","preciseIdentifier":"s:7Parsing7ParsersO13MapConversionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-18m9d","abstract":[{"text":"Returns a parser-printer that transforms the output of this parser with a given conversion.","type":"text"}],"url":"\/documentation\/parsing\/parser\/map(_:)-18m9d","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVOOO/compactMap(_:)":{"url":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/compactmap(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVOOO\/compactMap(_:)","type":"topic","title":"compactMap(_:)","role":"symbol","abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"text":" result of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"url":"\/documentation\/parsing\/parsers","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVOOO":{"role":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVOOO","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ZipVVVOOO"}],"title":"ParserBuilder.ZipVVVOOO","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ZipVVVOOO"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvvooo"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVOOO/Parser-Implementations":{"title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVOOO\/Parser-Implementations","abstract":[],"url":"\/documentation\/parsing\/parserbuilder\/zipvvvooo\/parser-implementations","kind":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"type":"topic","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"title":"Parse","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"url":"\/documentation\/parsing\/parse","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"title":"ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"title":"Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"abstract":[{"type":"text","text":"Declares a type that can transform an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value back into an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"topic","kind":"symbol","role":"symbol"}}}