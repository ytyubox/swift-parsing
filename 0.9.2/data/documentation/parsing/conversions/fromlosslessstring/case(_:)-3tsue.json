{"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/case(_:)-3tsue"},"abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"A conversion that can embed the associated values of an enum case into the case,","type":"text"},{"text":" ","type":"text"},{"text":"and extract the associated values from the case.","type":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An embed function where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Enum"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}]}],"name":"embed"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true,"type":"reference"},{"text":" into an enum:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["enum Expression {","  case add(Int, Int)","  ...","}","","let add = ParsePrint(.case(Expression.add)) {","  Int.parser()","  \"+\"","  Int.parser()","}","try add.parse(\"1+2\")  \/\/ Expression.add(1, 2)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To transform the output of a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true},{"type":"text","text":" into a struct, see "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]}],"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"case(_:)","modules":[{"name":"Parsing"}],"extendedModule":"Parsing","externalID":"s:7Parsing10ConversionPAAE4casey9CasePaths0D4PathVyqd_0_qd__Gqd_0_qd__cAHRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO18FromLosslessStringV","symbolKind":"method","role":"symbol","roleHeading":"Type Method"},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/Conversion-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conversions\/fromlosslessstring\/case(_:)-3tsue"]}],"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString/memberwise(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","title":"memberwise(_:)","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/memberwise(_:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","url":"\/documentation\/parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CasePath","kind":"identifier"}],"title":"CasePath","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","navigatorTitle":[{"text":"CasePath","kind":"identifier"}],"url":"\/documentation\/casepaths\/casepath","type":"topic","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a root’s embedded","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString/case(_:)-3tsue":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/case(_:)-3tsue","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"case(_:)","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/case(_:)-3tsue","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString/Conversion-Implementations":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/Conversion-Implementations","title":"Conversion Implementations","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/conversion-implementations","role":"collectionGroup","kind":"article","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString","title":"Conversions.FromLosslessString","url":"\/documentation\/parsing\/conversions\/fromlosslessstring","navigatorTitle":[{"text":"FromLosslessString","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromLosslessString","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A conversion from a string to a lossless string-convertible type.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"url":"\/documentation\/parsing\/parser","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","role":"symbol","url":"\/documentation\/parsing\/parserprinter","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"url":"\/documentation\/parsing\/conversions","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","role":"symbol","title":"Conversions","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]}}}