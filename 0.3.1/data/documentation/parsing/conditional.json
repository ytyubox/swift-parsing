{"variants":[{"paths":["\/documentation\/parsing\/conditional"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"First"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Second"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"text":" == ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This parser is useful for situations where you want to run one of two different parsers based on","type":"text"},{"text":" ","type":"text"},{"text":"a condition, which typically would force you to perform ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/eraseToAnyParser()","type":"reference","isActive":true},{"text":" and incur","type":"text"},{"text":" ","type":"text"},{"text":"a performance penalty.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you can use this parser in a "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","isActive":true,"type":"reference"},{"type":"text","text":" operation to use the parsed"},{"type":"text","text":" "},{"type":"text","text":"output to determine what parser to run next:"}]},{"syntax":"swift","type":"codeListing","code":["versionParser.flatMap { version in","  version == \"2.0\"","    ? Conditional.first(V2Parser())","    : Conditional.second(LegacyParser())","}"]}]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","interfaceLanguage":"swift"},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/first(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/second(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/Parser-Implementations"]}],"schemaVersion":{"patch":0,"minor":2,"major":0},"abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"metadata":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Conditional"}],"role":"symbol","externalID":"s:7Parsing11ConditionalO","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"title":"Conditional","modules":[{"name":"Parsing"}],"roleHeading":"Enumeration","symbolKind":"enum"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/first(_:)":{"abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/first(_:)","type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"first","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":")"}],"url":"\/documentation\/parsing\/conditional\/first(_:)","kind":"symbol","title":"Conditional.first(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"url":"\/documentation\/parsing\/conditional","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that can parse output from two types of parsers.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","title":"Conditional","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing","type":"topic","url":"\/documentation\/parsing","role":"collection","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/conditional\/parse(_:)","role":"symbol","title":"parse(_:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","title":"Parser","type":"topic","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value into an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/second(_:)":{"abstract":[],"type":"topic","url":"\/documentation\/parsing\/conditional\/second(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"second","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"Conditional.second(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/second(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/Parser-Implementations":{"title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/Parser-Implementations","url":"\/documentation\/parsing\/conditional\/parser-implementations","type":"topic","role":"collectionGroup","abstract":[],"kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/flatMap(_:)":{"abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser into a new parser."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","type":"topic","title":"flatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewParser"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"text":"NewParser","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO7FlatMapV","text":"FlatMap","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewParser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/parsing\/parser\/flatmap(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/eraseToAnyParser()":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/eraseToAnyParser()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/parser\/erasetoanyparser()","type":"topic","title":"eraseToAnyParser()"}}}