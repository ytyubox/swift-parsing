{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser\/Parser-Implementations"]]},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"take","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Take2","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO5Take2V"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","externalID":"s:7Parsing6ParserPAAE4takeyAA7ParsersO5Take2Vy_xqd__Gqd__AaBRd__5InputQyd__AJRtzlF::SYNTHESIZED::s:7Parsing7ParsersO12DoubleParserV","extendedModule":"Parsing","modules":[{"name":"Parsing"}],"roleHeading":"Instance Method","title":"take(_:)","role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-62sie"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"parser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Take2","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take2","preciseIdentifier":"s:7Parsing7ParsersO5Take2V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"A parser that runs two parsers, returning both outputs in a tuple.","type":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A parser to run immediately after this parser.","type":"text"}]}],"name":"parser"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator is used to gather up multiple values and can bundle them into a single data type"},{"type":"text","text":" "},{"type":"text","text":"when used alongside the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser\/map(_:)"},{"type":"text","text":" operator."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, two "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"s are parsed using "},{"type":"codeVoice","code":"take(_:)-1fw8y"},{"type":"text","text":" before they are"},{"type":"text","text":" "},{"type":"text","text":"combined into a "},{"type":"codeVoice","code":"Point"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct Point { var x, y: Double }","","var input = \"-1.5,1\"[...].utf8","let output = Double.parser()","  .skip(\",\")","  .take(Double.parser())","  .map(Point.init)","  .parse(&input) \/\/ => Point(x: -1.5, y: 1)","precondition(Substring(input) == \"\")"],"syntax":"swift"}]}],"abstract":[{"text":"Returns a parser that runs this parser and the given parser, returning both outputs in a","type":"text"},{"text":" ","type":"text"},{"text":"tuple.","type":"text"}],"schemaVersion":{"minor":2,"patch":0,"major":0},"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser\/take(_:)-62sie"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/DoubleParser/take(_:)-62sie":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO5Take2V","kind":"typeIdentifier","text":"Take2"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":">"}],"title":"take(_:)","role":"symbol","url":"\/documentation\/parsing\/parsers\/doubleparser\/take(_:)-62sie","abstract":[{"type":"text","text":"Returns a parser that runs this parser and the given parser, returning both outputs in a"},{"type":"text","text":" "},{"type":"text","text":"tuple."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser\/take(_:)-62sie"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/DoubleParser":{"url":"\/documentation\/parsing\/parsers\/doubleparser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DoubleParser"}],"title":"Parsers.DoubleParser","navigatorTitle":[{"kind":"identifier","text":"DoubleParser"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that consumes a double from the beginning of a collection of UTF-8 code units."}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","url":"\/documentation\/parsing","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Take2":{"abstract":[{"text":"A parser that runs two parsers, one after the other, and returns both outputs in a tuple.","type":"text"}],"url":"\/documentation\/parsing\/parsers\/take2","kind":"symbol","title":"Parsers.Take2","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take2","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Take2","kind":"identifier"}],"navigatorTitle":[{"text":"Take2","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"kind":"symbol","url":"\/documentation\/parsing\/parsers","type":"topic","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"title":"Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","url":"\/documentation\/parsing\/parser","type":"topic","abstract":[{"type":"text","text":"Declares a type that can parse an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/DoubleParser/Parser-Implementations":{"url":"\/documentation\/parsing\/parsers\/doubleparser\/parser-implementations","title":"Parser Implementations","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser\/Parser-Implementations","role":"collectionGroup","kind":"article","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/DoubleParser/map(_:)":{"role":"symbol","url":"\/documentation\/parsing\/parsers\/doubleparser\/map(_:)","type":"topic","abstract":[{"text":"Returns a parser that transforms the output of this parser with a given closure.","type":"text"}],"title":"map(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/DoubleParser\/map(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO3MapV","text":"Map"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}]}}}