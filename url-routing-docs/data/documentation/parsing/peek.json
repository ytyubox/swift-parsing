{"schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","text":"Parser"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"It lets the upstream parser “peek” into the input without consuming it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, identifiers (variables, functions, etc.) in Swift allow the first character to be a"},{"type":"text","text":" "},{"type":"text","text":"letter or underscore, but not a digit, but subsequent characters can be digits. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"type":"text","text":", "},{"type":"codeVoice","code":"foo123"},{"type":"text","text":" "},{"type":"text","text":"is a valid identifier, but "},{"type":"codeVoice","code":"123foo"},{"type":"text","text":" is not. We can create an identifier parser by using "},{"type":"codeVoice","code":"Peek"},{"type":"text","text":" "},{"type":"text","text":"to first check if the input starts with a letter or underscore, and if it does, return the"},{"type":"text","text":" "},{"type":"text","text":"remainder of the input up to the first character that is not a letter, a digit, or an"},{"type":"text","text":" "},{"type":"text","text":"underscore."}]},{"code":["let identifier = Parse {","  Peek { Prefix(1) { $0.isLetter || $0 == \"_\" } }","  Prefix { $0.isNumber || $0.isLetter || $0 == \"_\" }","}","","try identifier.parse(\"foo123\") \/\/ ✅ \"foo123\"","try identifier.parse(\"_foo123\") \/\/ ✅ \"_foo123\"","try identifier.parse(\"1_foo123\") \/\/ ❌","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | 1_foo123","\/\/   | ^ expected 1 element satisfying predicate"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"roleHeading":"Structure","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing4PeekV","title":"Peek","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"symbolKind":"struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}]},"identifier":{"url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/upstream"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/parse(_:)","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/print(_:into:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/ParserPrinter-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"paths":["\/documentation\/parsing\/peek"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/init(_:)":{"url":"\/documentation\/parsing\/peek\/init(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/init(_:)","type":"topic","abstract":[{"text":"Construct a parser that runs the given parser, but does not consume any input.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","abstract":[],"type":"topic","role":"collection","url":"\/documentation\/parsing","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"type":"topic","role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"title":"Parser"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/print(_:into:)":{"type":"topic","title":"print(_:into:)","role":"symbol","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"kind":"symbol","url":"\/documentation\/parsing\/peek\/print(_:into:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"((), ","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/print(_:into:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/Parser-Implementations":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/Parser-Implementations","kind":"article","role":"collectionGroup","title":"Parser Implementations","url":"\/documentation\/parsing\/peek\/parser-implementations"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek":{"url":"\/documentation\/parsing\/peek","role":"symbol","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek","type":"topic","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"title":"Peek","kind":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/parse(_:)":{"title":"parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"url":"\/documentation\/parsing\/peek\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"input."}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/parse(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/ParserPrinter-Implementations":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/peek\/parserprinter-implementations","abstract":[],"kind":"article","role":"collectionGroup"},"doc://co.pointfree.URLRouting/documentation/Parsing/Peek/upstream":{"abstract":[],"kind":"symbol","title":"upstream","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"upstream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Peek\/upstream","type":"topic","url":"\/documentation\/parsing\/peek\/upstream"}}}