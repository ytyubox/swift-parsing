{"schemaVersion":{"minor":2,"major":0,"patch":0},"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Parsing"}],"extendedModule":"Parsing","externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:7Parsing4FailV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier","text":"CompactMap"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"title":"compactMap(_:)","symbolKind":"method","role":"symbol"},"sections":[],"abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" results of calling the given closure with the"},{"type":"text","text":" "},{"type":"text","text":"output of this parser."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/Parser-Implementations"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/compactMap(_:)","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/fail\/compactmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A parser that outputs the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" result of calling the given transformation","type":"text"},{"text":" ","type":"text"},{"text":"with the output of this parser.","type":"text"}]}],"kind":"content"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that accepts output of this parser as its argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns an optional value.","type":"text"}]}],"name":"transform"}]},{"content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is similar to "},{"type":"codeVoice","code":"Sequence.compactMap"},{"type":"text","text":" in the Swift standard library, as well as"},{"type":"text","text":" "},{"type":"codeVoice","code":"Publisher.compactMap"},{"type":"text","text":" in the Combine framework."}]},{"code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) }","var input = \"124 hello world\"[...].utf8","let output = evenParser.parse(&input) \/\/ 124","input \/\/ \" hello world\""],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Fail/compactMap(_:)":{"type":"topic","title":"compactMap(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"CompactMap","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/parsing\/fail\/compactmap(_:)","abstract":[{"text":"Returns a parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results of calling the given closure with the","type":"text"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/compactMap(_:)","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","url":"\/documentation\/parsing","abstract":[],"type":"topic","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail/Parser-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail\/Parser-Implementations","kind":"article","url":"\/documentation\/parsing\/fail\/parser-implementations","abstract":[],"type":"topic","title":"Parser Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"role":"symbol","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","url":"\/documentation\/parsing\/parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"type":"topic","title":"Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CompactMap":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompactMap"}],"type":"topic","title":"Parsers.CompactMap","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" results of calling the given transformation with the"},{"type":"text","text":" "},{"type":"text","text":"output of its upstream parser."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CompactMap","url":"\/documentation\/parsing\/parsers\/compactmap","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CompactMap"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"role":"symbol","navigatorTitle":[{"text":"Fail","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","kind":"symbol","url":"\/documentation\/parsing\/fail","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"type":"topic","title":"Fail"}}}