{"variants":[{"paths":["\/documentation\/parsing\/startswith"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/count","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/possiblePrefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/startsWith"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/Parser-Implementations"],"generated":true,"title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"schemaVersion":{"major":0,"patch":0,"minor":2},"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","kind":"typeIdentifier","preciseIdentifier":"s:Sl"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser is named after "},{"code":"Sequence.starts(with:)","type":"codeVoice"},{"type":"text","text":", and tests that the input it is parsing"},{"type":"text","text":" "},{"type":"text","text":"starts with a given subsequence by calling this method under the hood."}]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", it consumes this prefix and returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","StartsWith(\"Hello, \").parse(&input) \/\/ ()","input                               \/\/ \"Blob!\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", it fails and leaves input intact:","type":"text"}]},{"type":"codeListing","code":["var input = \"Goodnight, Blob!\"[...]","StartsWith(\"Hello, \").parse(&input) \/\/ nil","input                               \/\/ \"Goodnight, Blob!\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This parser returns ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" the sequence of elements it consumes because the sequence","type":"text"},{"text":" ","type":"text"},{"text":"is already known at the time the parser is created (it is the value quite literally passed to","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)"},{"text":"). This means ","type":"text"},{"type":"codeVoice","code":"StartsWith"},{"text":" plays nicely when chained into the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/take(_:)-1fw8y"},{"text":" operation, which will discard the ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" output.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In many circumstances you can elide the ","type":"text"},{"code":"StartsWith","type":"codeVoice"},{"text":" parser entirely and just use the collection","type":"text"},{"text":" ","type":"text"},{"text":"as the parser. For example:","type":"text"}]},{"type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","\"Hello, \".parse(&input) \/\/ ()","input                   \/\/ \"Blob!\""],"syntax":"swift"}]}],"metadata":{"roleHeading":"Structure","title":"StartsWith","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}],"modules":[{"name":"Parsing"}],"symbolKind":"struct","role":"symbol","externalID":"s:7Parsing10StartsWithV","navigatorTitle":[{"text":"StartsWith","kind":"identifier"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith"},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","title":"Conforms To"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/Parser-Implementations":{"url":"\/documentation\/parsing\/startswith\/parser-implementations","title":"Parser Implementations","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/Parser-Implementations","abstract":[],"kind":"article","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/parse(_:)":{"type":"topic","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/startswith\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":"?","kind":"text"}],"title":"parse(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/possiblePrefix":{"type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/parsing\/startswith\/possibleprefix","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/possiblePrefix","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"possiblePrefix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AnyCollection","preciseIdentifier":"s:s13AnyCollectionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">"}],"title":"possiblePrefix","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:by:)":{"type":"topic","abstract":[{"text":"Initializes a parser that successfully returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" when the initial elements of its input","type":"text"},{"text":" ","type":"text"},{"text":"are equivalent to the elements in another sequence, using the given predicate as the","type":"text"},{"text":" ","type":"text"},{"text":"equivalence test.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/startswith\/init(_:by:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"title":"init(_:by:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"title":"Parsing","kind":"symbol","url":"\/documentation\/parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/startsWith":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/startsWith","url":"\/documentation\/parsing\/startswith\/startswith","title":"startsWith","role":"symbol","kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"startsWith","kind":"identifier"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/count":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/count","url":"\/documentation\/parsing\/startswith\/count","abstract":[],"fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"type":"topic","kind":"symbol","title":"count","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/take(_:)-1fw8y":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"take","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"SkipFirst","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO9SkipFirstV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[],"kind":"symbol","role":"symbol","title":"take(_:)","deprecated":true,"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/take(_:)-1fw8y","url":"\/documentation\/parsing\/parser\/take(_:)-1fw8y"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","url":"\/documentation\/parsing\/startswith\/init(_:)","abstract":[{"text":"Initializes a parser that successfully returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"type":"text","text":" when the initial elements of its input"},{"type":"text","text":" "},{"type":"text","text":"are equivalent to the elements in another sequence."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PossiblePrefix"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":")"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Input.SubSequence","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Input.Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"type":"topic","kind":"symbol","title":"init(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","url":"\/documentation\/parsing\/startswith","title":"StartsWith","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"type":"topic"}}}