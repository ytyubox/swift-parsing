{"kind":"symbol","abstract":[{"text":"A parser that consumes a single newline from the beginning of the input.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"sections":[],"metadata":{"role":"symbol","roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"Newline"}],"symbolKind":"struct","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}],"externalID":"s:7Parsing7NewlineV","title":"Newline"},"schemaVersion":{"minor":2,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"UTF8","preciseIdentifier":"s:s4UTF8a"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CodeUnit","preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita"}]}]},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"It will consume both line feeds (","type":"text"},{"type":"codeVoice","code":"\"\\n\""},{"text":") and carriage returns with line feeds (","type":"text"},{"type":"codeVoice","code":"\"\\r\\n\""},{"text":").","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-7vzmw","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-xyrv"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/Parser-Implementations"],"title":"Default Implementations","generated":true}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/newline"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"title":"Parsing","kind":"symbol","url":"\/documentation\/parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/parse(_:)":{"url":"\/documentation\/parsing\/newline\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/parse(_:)","title":"parse(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","abstract":[{"text":"A parser that consumes a single newline from the beginning of the input.","type":"text"}],"url":"\/documentation\/parsing\/newline","navigatorTitle":[{"text":"Newline","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"type":"topic","title":"Newline"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-7vzmw":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-7vzmw","abstract":[],"role":"symbol","url":"\/documentation\/parsing\/newline\/init()-7vzmw","title":"init()"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-xyrv":{"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-xyrv","role":"symbol","title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/parsing\/newline\/init()-xyrv"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/Parser-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/Parser-Implementations","abstract":[],"url":"\/documentation\/parsing\/newline\/parser-implementations","role":"collectionGroup","type":"topic","title":"Parser Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","role":"symbol"}}}