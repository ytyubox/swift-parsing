{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Not"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"type":"codeListing","code":["let uncommentedLine = Parse {","  Not { \"\/\/\" }","  PrefixUpTo(\"\\n\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will check the input doesn’t start with "},{"code":"\"\/\/\"","type":"codeVoice"},{"type":"text","text":", and if it doesn’t, it will return the whole"},{"type":"text","text":" "},{"type":"text","text":"input up to the first newline."}]}]}],"schemaVersion":{"patch":0,"minor":2,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"sections":[],"kind":"symbol","metadata":{"externalID":"s:7Parsing3NotV","navigatorTitle":[{"kind":"identifier","text":"Not"}],"roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Not"}],"modules":[{"name":"Parsing"}],"role":"symbol","symbolKind":"struct","title":"Not"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/upstream"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/parse(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/Parser-Implementations"],"title":"Default Implementations"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo","title":"Conforms To"}],"variants":[{"paths":["\/documentation\/parsing\/not"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Not/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/Parser-Implementations","title":"Parser Implementations","abstract":[],"url":"\/documentation\/parsing\/not\/parser-implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/Not/init(_:)":{"type":"topic","role":"symbol","url":"\/documentation\/parsing\/not\/init(_:)","abstract":[{"text":"Creates a parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"title":"init(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":")"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Not/parse(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/parse(_:)","title":"parse(_:)","url":"\/documentation\/parsing\/not\/parse(_:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"title":"Parsing","kind":"symbol","url":"\/documentation\/parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Not/upstream":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not\/upstream","abstract":[],"kind":"symbol","role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"upstream"},{"kind":"text","text":": "},{"text":"Upstream","kind":"typeIdentifier"}],"title":"upstream","type":"topic","url":"\/documentation\/parsing\/not\/upstream"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","title":"Not","abstract":[{"type":"text","text":"A parser that succeeds if the given parser fails, and does not consume any input."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}],"url":"\/documentation\/parsing\/not","kind":"symbol","navigatorTitle":[{"text":"Not","kind":"identifier"}],"type":"topic","role":"symbol"}}}