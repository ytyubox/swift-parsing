{"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"],"title":"Protocols"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"],"title":"Enumerations"}],"seeAlsoSections":[{"identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"abstract":[{"text":"The collection of videos from ","type":"text"},{"identifier":"https:\/\/www.pointfree.co","type":"reference","isActive":true},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"title":"Related Documentation"}],"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Additional Resources","anchor":"Additional-Resources"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"reference"}]}]}]},{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Parsing with this library is performed by listing out many small parsers that describe how to","type":"text"},{"text":" ","type":"text"},{"text":"incrementally consume small bits from the beginning of an input string. For example, suppose you","type":"text"},{"text":" ","type":"text"},{"text":"have a string that holds some user data that you want to parse into an array of ","type":"text"},{"type":"codeVoice","code":"User"},{"text":"s:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"]},{"type":"paragraph","inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This says that to parse a user we:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Parse and consume an integer from the beginning of the input"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then a comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then everything up to the next comma","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then another comma","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"and finally a boolean.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to parse an entire array of users we:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" parser many times"}]}]},{"content":[{"inlineContent":[{"text":"between each invocation of ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" we run the separator parser to consume a newline","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"and once the "},{"code":"user","type":"codeVoice"},{"type":"text","text":" and separator parsers have consumed all they can we run the terminator"},{"type":"text","text":" "},{"type":"text","text":"parser to verify there is no more input to consume."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits","type":"text"},{"text":" ","type":"text"},{"text":"an error that describes exactly what went wrong:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With a few small changes we can also turn this parser into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"}]},{"type":"paragraph","inlineContent":[{"text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks","type":"text"},{"text":" ","type":"text"},{"text":"to learn in order to performantly parse larger inputs.","type":"text"}]}]}],"metadata":{"externalID":"Parsing","symbolKind":"module","modules":[{"name":"Parsing"}],"roleHeading":"Framework","role":"collection","title":"Parsing"},"variants":[{"paths":["\/documentation\/parsing"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"url":"\/documentation\/parsing\/conditional","deprecated":true,"navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"kind":"symbol","abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"title":"Conditional"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","url":"\/documentation\/parsing","title":"Parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"https://github.com/pointfreeco/swift-parsing/discussions":{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"link","title":"Discussions","titleInlineContent":[{"type":"text","text":"Discussions"}],"url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions"},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParsePrint"}],"title":"ParsePrint","url":"\/documentation\/parsing\/parseprint","abstract":[{"type":"text","text":"An entry to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},{"type":"text","text":" syntax that requires the builder to be a printer."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParsePrint"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"role":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"title":"String Abstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"kind":"symbol","type":"topic","title":"Parsers","url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","type":"topic","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"kind":"article","title":"Error Messages","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"type":"topic","role":"article","url":"\/documentation\/parsing\/errormessages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","type":"topic","abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"url":"\/documentation\/parsing\/design","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","url":"\/documentation\/parsing\/countingrange","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CountingRange"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CountingRange"}],"title":"CountingRange","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParserPrinter"}],"url":"\/documentation\/parsing\/anyparserprinter","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyParserPrinter"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","type":"topic","abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from "},{"type":"codeVoice","code":"Input"},{"type":"text","text":"."}],"role":"symbol","title":"AnyParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","abstract":[],"role":"symbol","url":"\/documentation\/parsing\/prependablecollection","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}],"title":"PrependableCollection"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"abstract":[],"kind":"symbol","title":"ParserPrinter","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"abstract":[],"kind":"symbol","title":"Conversion","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"kind":"symbol","title":"AnyConversion","abstract":[{"type":"text","text":"A type-erased "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"type":"text","text":"."}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","url":"\/documentation\/parsing\/anyconversion","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}]},"https://github.com/pointfreeco/swift-parsing":{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"link","title":"GitHub Repo","titleInlineContent":[{"type":"text","text":"GitHub Repo"}],"url":"https:\/\/github.com\/pointfreeco\/swift-parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","url":"\/documentation\/parsing\/parserbuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"title":"ParserBuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"url":"\/documentation\/parsing\/conversions","navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"kind":"symbol","title":"Conversions","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"title":"Getting Started","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"url":"\/documentation\/parsing\/gettingstarted","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","url":"\/documentation\/parsing\/parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[]},"https://www.pointfree.co/collections/parsing":{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"link","title":"Point-Free Videos","titleInlineContent":[{"type":"text","text":"Point-Free Videos"}],"url":"https:\/\/www.pointfree.co\/collections\/parsing"}}}