{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)-2aye6","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)-3qeku","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)-54vcy"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/count","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/possiblePrefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/startsWith"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations"],"generated":true,"title":"Default Implementations"}],"seeAlsoSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"],"generated":true,"title":"Common parsers"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This parser is named after ","type":"text"},{"type":"codeVoice","code":"Sequence.starts(with:)"},{"text":", and tests that the input it is parsing","type":"text"},{"text":" ","type":"text"},{"text":"starts with a given subsequence by calling this method under the hood.","type":"text"}]},{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"true"},{"text":", it consumes this prefix and returns ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","StartsWith(\"Hello, \").parse(&input)  \/\/ ()","input                                \/\/ \"Blob!\""]},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", it fails and leaves input intact:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"Goodnight, Blob!\"[...]","try StartsWith(\"Hello, \").parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | Goodnight, Blob!","\/\/   | ^ expected \"Hello, \""]},{"inlineContent":[{"text":"This parser returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" and ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" the sequence of elements it consumes because the sequence","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is already known at the time the parser is created (it is the value quite literally passed to"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","isActive":true,"type":"reference"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In many circumstances you can omit the "},{"type":"codeVoice","code":"StartsWith"},{"type":"text","text":" parser entirely and just use the collection"},{"type":"text","text":" "},{"type":"text","text":"as the parser. For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"Hello, Blob!\"[...]","","try \"Hello, \".parse(&input)  \/\/ ()","input                        \/\/ \"Blob!\""]}],"kind":"content"}],"metadata":{"symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"role":"symbol","externalID":"s:7Parsing10StartsWithV","roleHeading":"Structure","modules":[{"name":"Parsing"}],"title":"StartsWith","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"A parser that parses a sequence of elements from its input.","type":"text"}],"sections":[],"variants":[{"paths":["\/documentation\/parsing\/startswith"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/count":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/count","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"count","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"role":"symbol","title":"count","type":"topic","url":"\/documentation\/parsing\/startswith\/count","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","title":"parse(_:)","type":"topic","url":"\/documentation\/parsing\/startswith\/parse(_:)","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}],"navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}],"type":"topic","abstract":[],"url":"\/documentation\/parsing\/fromunicodescalarview","deprecated":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","role":"symbol","title":"FromUnicodeScalarView","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/ParserPrinter-Implementations":{"url":"\/documentation\/parsing\/startswith\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations","kind":"article","role":"collectionGroup","title":"ParserPrinter Implementations","abstract":[],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/Parser-Implementations":{"title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/Parser-Implementations","url":"\/documentation\/parsing\/startswith\/parser-implementations","type":"topic","role":"collectionGroup","kind":"article","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"url":"\/documentation\/parsing\/prefixupto","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"text":"elements.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}],"kind":"symbol","title":"PrefixUpTo"},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"title":"First","navigatorTitle":[{"text":"First","kind":"identifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/first","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"title":"StartsWith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","url":"\/documentation\/parsing\/startswith","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that parses a sequence of elements from its input.","type":"text"}],"navigatorTitle":[{"text":"StartsWith","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"kind":"article","url":"\/documentation\/parsing\/float","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","title":"Float","abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a string.","type":"text"}],"role":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"kind":"symbol","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"url":"\/documentation\/parsing\/peek","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","title":"Peek","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/startsWith":{"title":"startsWith","abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/startsWith","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"startsWith","kind":"identifier"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","url":"\/documentation\/parsing\/startswith\/startswith","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/possiblePrefix":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/possiblePrefix","role":"symbol","url":"\/documentation\/parsing\/startswith\/possibleprefix","type":"topic","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"possiblePrefix","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s13AnyCollectionV","text":"AnyCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"possiblePrefix","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:by:)-54vcy":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)-54vcy","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Substring","preciseIdentifier":"s:Ss","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:Ss7Elementa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Substring","preciseIdentifier":"s:Ss","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:Ss7Elementa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"init(_:by:)","type":"topic","url":"\/documentation\/parsing\/startswith\/init(_:by:)-54vcy","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromUTF8View","kind":"identifier"}],"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","title":"FromUTF8View","url":"\/documentation\/parsing\/fromutf8view","kind":"symbol","navigatorTitle":[{"text":"FromUTF8View","kind":"identifier"}],"role":"symbol","deprecated":true},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","type":"topic","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Input.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"init(_:)","url":"\/documentation\/parsing\/startswith\/init(_:)","abstract":[{"text":"Initializes a parser that successfully returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" when the initial elements of its input","type":"text"},{"text":" ","type":"text"},{"text":"are equivalent to the elements in another sequence.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"PossiblePrefix"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":")"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"navigatorTitle":[{"kind":"identifier","text":"Lazy"}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","kind":"symbol","url":"\/documentation\/parsing\/lazy","abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)"},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"type":"text","text":"create a parser for the given input."}],"title":"Lazy","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Lazy"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"abstract":[{"text":"A parser that returns the subsequence of input consumed by another parser.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Consumed","kind":"identifier"}],"navigatorTitle":[{"text":"Consumed","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","kind":"symbol","title":"Consumed","url":"\/documentation\/parsing\/consumed","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"title":"FromSubstring","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"kind":"symbol","deprecated":true,"role":"symbol","type":"topic","abstract":[],"url":"\/documentation\/parsing\/fromsubstring","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FromSubstring","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","url":"\/documentation\/parsing","title":"Parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","url":"\/documentation\/parsing\/many","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"kind":"symbol","role":"symbol","title":"Many"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Prefix"}],"kind":"symbol","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Prefix"}],"url":"\/documentation\/parsing\/prefix","title":"Prefix","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","url":"\/documentation\/parsing\/parserprinter","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"role":"symbol","url":"\/documentation\/parsing\/not","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Not"}],"abstract":[{"type":"text","text":"A parser that succeeds if the given parser fails, and does not consume any input."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Not"}],"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","title":"Not"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"}],"navigatorTitle":[{"text":"Whitespace","kind":"identifier"}],"abstract":[{"text":"A parser that consumes whitespace from the beginning of input.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","title":"Whitespace","role":"symbol","url":"\/documentation\/parsing\/whitespace"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"kind":"symbol","url":"\/documentation\/parsing\/prefixthrough","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","title":"PrefixThrough","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}],"role":"symbol","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"url":"\/documentation\/parsing\/optionally","title":"Optionally","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"Optionally","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","url":"\/documentation\/parsing\/bool","kind":"article","type":"topic","title":"Bool","role":"article","abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}]},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"type":"topic","role":"article","abstract":[{"type":"text","text":"A parser that consumes the characters contained in a "},{"type":"codeVoice","code":"CharacterSet"},{"type":"text","text":" from the beginning of a string."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","title":"CharacterSet","kind":"article","url":"\/documentation\/parsing\/characterset"},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"type":"topic","abstract":[{"text":"A parser that consumes a ","type":"text"},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" value from the beginning of a string."}],"title":"UUID","role":"article","url":"\/documentation\/parsing\/uuid","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:by:)-2aye6":{"url":"\/documentation\/parsing\/startswith\/init(_:by:)-2aye6","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring.UTF8View","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:SS8UTF8ViewV","text":"UTF8View","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:Ss","text":"Substring","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Ss8UTF8ViewV","text":"UTF8View","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Ss8UTF8ViewV7Elementa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Ss","text":"Substring","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Ss8UTF8ViewV","text":"UTF8View","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Ss8UTF8ViewV7Elementa","text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:by:)","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)-2aye6"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","title":"Newline","navigatorTitle":[{"text":"Newline","kind":"identifier"}],"role":"symbol","deprecated":true,"url":"\/documentation\/parsing\/newline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","kind":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","abstract":[],"title":"parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"text":"Output","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"type":"topic","abstract":[{"text":"A parser that consumes a string literal from the beginning of a string.","type":"text"}],"title":"String","role":"article","url":"\/documentation\/parsing\/string","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/oneof","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"kind":"symbol","title":"OneOf","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/From":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"From","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"From"}],"role":"symbol","url":"\/documentation\/parsing\/from","title":"From","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"url":"\/documentation\/parsing\/always","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"title":"Always","kind":"symbol","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Always"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"type":"topic","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"title":"Stream","role":"symbol","url":"\/documentation\/parsing\/stream","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"kind":"article","url":"\/documentation\/parsing\/caseiterable","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","title":"CaseIterable","abstract":[{"text":"A parser-printer that consumes a case-iterable, raw representable value from the beginning of a","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"role":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","url":"\/documentation\/parsing\/parse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Parse","kind":"identifier"}],"title":"Parse","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","url":"\/documentation\/parsing\/parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:by:)-3qeku":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)-3qeku","abstract":[{"type":"text","text":"Initializes a parser that successfully returns "},{"code":"Void","type":"codeVoice"},{"text":" when the initial elements of its input","type":"text"},{"text":" ","type":"text"},{"text":"are equivalent to the elements in another sequence, using the given predicate as the","type":"text"},{"text":" ","type":"text"},{"text":"equivalence test.","type":"text"}],"url":"\/documentation\/parsing\/startswith\/init(_:by:)-3qeku","type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:by:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"kind":"symbol","url":"\/documentation\/parsing\/fail","navigatorTitle":[{"text":"Fail","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"role":"symbol","title":"Fail","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"abstract":[{"text":"A parser that discards the output of another parser.","type":"text"}],"navigatorTitle":[{"text":"Skip","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"Skip","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Skip","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","url":"\/documentation\/parsing\/skip"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"navigatorTitle":[{"text":"End","kind":"identifier"}],"title":"End","abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","url":"\/documentation\/parsing\/end","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"kind":"symbol","abstract":[{"type":"text","text":"A type-erased parser of "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" from "},{"code":"Input","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"role":"symbol","title":"AnyParser","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","type":"topic","url":"\/documentation\/parsing\/anyparser"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}],"url":"\/documentation\/parsing\/rest","title":"Rest","role":"symbol","abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"Rest","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"kind":"article","url":"\/documentation\/parsing\/int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","title":"Int","abstract":[{"text":"A parser that consumes an integer from the beginning of a string.","type":"text"}],"role":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"title":"Digits","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}],"abstract":[{"text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code","type":"text"},{"text":" ","type":"text"},{"text":"units.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","url":"\/documentation\/parsing\/digits","kind":"symbol","navigatorTitle":[{"text":"Digits","kind":"identifier"}],"type":"topic"}}}