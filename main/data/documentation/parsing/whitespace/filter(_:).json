{"abstract":[{"text":"Returns a parser that filters output from this parser when its output does not satisfy the","type":"text"},{"text":" ","type":"text"},{"text":"given predicate.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/filter(_:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},{"text":".","kind":"text"},{"text":"Filter","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an output from this parser and returns a Boolean"},{"type":"text","text":" "},{"type":"text","text":"value indicating whether the output should be returned."}]}],"name":"predicate"}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that filters its output."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is similar to "},{"type":"codeVoice","code":"Sequence.filter"},{"type":"text","text":" in the Swift standard library, as well as"},{"type":"text","text":" "},{"type":"codeVoice","code":"Publisher.filter"},{"type":"text","text":" in the Combine framework."}],"type":"paragraph"},{"inlineContent":[{"text":"This parser fails if the predicate is not satisfied on the output of the upstream parser. For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following parser consumes only even integers and so fails when an odd integer is used:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var input = \"43 Hello, world!\"[...]","let number = try Int.parser().filter { $0.isMultiple(of: 2) }.parse(&input)","\/\/ error: processed value 43 failed to satisfy predicate","\/\/  --> input:1:1-2","\/\/ 1 | 43 Hello, world!","\/\/   | ^^ processed input"]}]}],"sections":[],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:7Parsing6ParserPAAE6filteryAA7ParsersO6FilterVy_xGSb6OutputQzcF::SYNTHESIZED::s:7Parsing10WhitespaceV","modules":[{"name":"Parsing"}],"extendedModule":"Parsing","symbolKind":"method","roleHeading":"Instance Method","title":"filter(_:)"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/whitespace\/filter(_:)"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"}],"navigatorTitle":[{"text":"Whitespace","kind":"identifier"}],"abstract":[{"text":"A parser that consumes whitespace from the beginning of input.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","title":"Whitespace","role":"symbol","url":"\/documentation\/parsing\/whitespace"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/filter(_:)":{"url":"\/documentation\/parsing\/whitespace\/filter(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","type":"topic","title":"filter(_:)","abstract":[{"text":"Returns a parser that filters output from this parser when its output does not satisfy the","type":"text"},{"text":" ","type":"text"},{"text":"given predicate.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/filter(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","url":"\/documentation\/parsing\/parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"kind":"symbol","type":"topic","title":"Parsers","url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/Parser-Implementations":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/Parser-Implementations","title":"Parser Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/whitespace\/parser-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","url":"\/documentation\/parsing","title":"Parsing","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","abstract":[{"text":"A parser that filters the output of an upstream parser when it does not satisfy a predicate.","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/parsers\/filter","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Filter"}],"navigatorTitle":[{"kind":"identifier","text":"Filter"}],"kind":"symbol","title":"Parsers.Filter","type":"topic"}}}