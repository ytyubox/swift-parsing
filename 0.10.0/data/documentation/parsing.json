{"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"],"title":"Protocols"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"],"title":"Enumerations"}],"seeAlsoSections":[{"abstract":[{"text":"The collection of videos from ","type":"text"},{"identifier":"https:\/\/www.pointfree.co","isActive":true,"type":"reference"},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"title":"Related Documentation"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Additional Resources","level":2,"anchor":"Additional-Resources"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/www.pointfree.co\/collections\/parsing","isActive":true}]}]}]},{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Parsing with this library is performed by listing out many small parsers that describe how to","type":"text"},{"text":" ","type":"text"},{"text":"incrementally consume small bits from the beginning of an input string. For example, suppose you","type":"text"},{"text":" ","type":"text"},{"text":"have a string that holds some user data that you want to parse into an array of ","type":"text"},{"code":"User","type":"codeVoice"},{"text":"s:","type":"text"}]},{"code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"A parser can be constructed for transforming the input string into an array of users in succinct"},{"type":"text","text":" "},{"type":"text","text":"and fluent API:"}],"type":"paragraph"},{"code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This says that to parse a user we:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Parse and consume an integer from the beginning of the input","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"then a comma"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then everything up to the next comma","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then another comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"and finally a boolean.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"And to parse an entire array of users we:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Run the ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" parser many times","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"between each invocation of "},{"type":"codeVoice","code":"user"},{"type":"text","text":" we run the separator parser to consume a newline"}]}]},{"content":[{"inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits"},{"type":"text","text":" "},{"type":"text","text":"an error that describes exactly what went wrong:"}],"type":"paragraph"},{"code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"With a few small changes we can also turn this parser into a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true,"type":"reference"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"That’s the basics of parsing a simple string format, but there are a lot more operators and tricks"},{"type":"text","text":" "},{"type":"text","text":"to learn in order to performantly parse larger inputs."}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/parsing"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Framework","modules":[{"name":"Parsing"}],"title":"Parsing","externalID":"Parsing","symbolKind":"module","role":"collection"},"kind":"symbol","hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"url":"\/documentation\/parsing\/gettingstarted","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","title":"Getting Started","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"url":"\/documentation\/parsing\/prependablecollection","navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","role":"symbol","title":"PrependableCollection"},"https://www.pointfree.co/collections/parsing":{"type":"link","url":"https:\/\/www.pointfree.co\/collections\/parsing","identifier":"https:\/\/www.pointfree.co\/collections\/parsing","title":"Point-Free Videos","titleInlineContent":[{"text":"Point-Free Videos","type":"text"}]},"https://github.com/pointfreeco/swift-parsing/discussions":{"type":"link","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","title":"Discussions","titleInlineContent":[{"text":"Discussions","type":"text"}]},"https://github.com/pointfreeco/swift-parsing":{"type":"link","url":"https:\/\/github.com\/pointfreeco\/swift-parsing","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","title":"GitHub Repo","titleInlineContent":[{"text":"GitHub Repo","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"title":"CountingRange","url":"\/documentation\/parsing\/countingrange"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"abstract":[],"deprecated":true,"type":"topic","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/conditional","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"title":"Conditional"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}],"title":"Conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","url":"\/documentation\/parsing\/conversions","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"type":"topic","role":"article","url":"\/documentation\/parsing\/errormessages","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","title":"Error Messages"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"title":"ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"url":"\/documentation\/parsing\/design","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","type":"topic","title":"Design","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"kind":"symbol","url":"\/documentation\/parsing\/parseprint","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParsePrint","kind":"identifier"}],"abstract":[{"type":"text","text":"An entry to "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true},{"type":"text","text":" syntax that requires the builder to be a printer."}],"role":"symbol","navigatorTitle":[{"text":"ParsePrint","kind":"identifier"}],"type":"topic","title":"ParsePrint"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can transform an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value back into an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Conversion","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"url":"\/documentation\/parsing\/conversion","navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","type":"topic","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A type-erased ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","isActive":true},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"title":"AnyConversion","url":"\/documentation\/parsing\/anyconversion"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"title":"AnyParserPrinter","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/anyparserprinter","navigatorTitle":[{"text":"AnyParserPrinter","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"title":"ParserPrinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"url":"\/documentation\/parsing\/parserprinter","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"role":"article","title":"String Abstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"url":"\/documentation\/parsing\/backtracking","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","title":"Backtracking","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"title":"Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"}}}