{"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:7Parsing11ConversionsO","kind":"typeIdentifier","text":"Conversions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","kind":"typeIdentifier","text":"Memberwise","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"text":"A memberwise initializer where ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":" directly maps to the memory","type":"text"},{"text":" ","type":"text"},{"text":"layout of ","type":"text"},{"code":"Root","type":"codeVoice"},{"text":", for example the internal, default initializer that is automatically","type":"text"},{"text":" ","type":"text"},{"text":"synthesized for structs.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"text":"A conversion that can embed a tuple of values into a struct, and destructure a","type":"text"},{"text":" ","type":"text"},{"text":"struct back into a tuple of values.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"code":"ParserPrinter","type":"codeVoice"},{"type":"text","text":" into a struct."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple "},{"code":"Coordinate","type":"codeVoice"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","isActive":true,"type":"reference"},{"type":"text","text":":"}]},{"type":"codeListing","code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To transform the output of a ","type":"text"},{"type":"codeVoice","code":"ParserPrinter"},{"text":" into an enum, see ","type":"text"},{"type":"codeVoice","code":"Conversion\/case(_:)-4j2n7"},{"text":".","type":"text"}]},{"type":"heading","level":2,"text":"Careful usage","anchor":"Careful-usage"},{"type":"paragraph","inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","type":"reference","isActive":true},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"type":"codeVoice","code":"unsafeBitcast"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" valid to use ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","type":"reference","isActive":true},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into"},{"type":"text","text":" "},{"type":"text","text":"your parser-printer and potentially causing crashes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose we provided an alternative initializer to "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" above that"},{"type":"text","text":" "},{"type":"text","text":"allowed you to create a coordinate from a radius and angle measured in degrees:"}]},{"type":"codeListing","code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This may seem innocent enough, but it is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" safe to use this initializer with"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","type":"reference","isActive":true},{"type":"text","text":". The following parser-printer will correctly parse a radius and angle into"},{"type":"text","text":" "},{"type":"text","text":"an x\/y coordinate:"}]},{"type":"codeListing","code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, printing a coordinate will ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" convert it back into a radius and angle, and","type":"text"},{"text":" ","type":"text"},{"text":"instead will erroneously use (0, 1) as the radius and angle:","type":"text"}]},{"type":"codeListing","code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This means this parser-printer does not round trip (see ","type":"text"},{"text":"doc:Roundtripping","type":"text"},{"text":"), ","type":"text"},{"inlineContent":[{"text":"i.e.","type":"text"}],"type":"emphasis"},{"text":" if we","type":"text"},{"text":" ","type":"text"},{"text":"parse and input and then print that output we do not get back the original input we started","type":"text"},{"text":" ","type":"text"},{"text":"with:","type":"text"}]},{"type":"codeListing","code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Further, it is possible to provide a custom initializer for a type that either re-orders the","type":"text"},{"text":" ","type":"text"},{"text":"fields or add\/removes fields, both of which will cause the underlying ","type":"text"},{"code":"unsafeBitCast","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"crash. For example, we could have a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct that holds onto a string for the bio and an","type":"text"},{"text":" ","type":"text"},{"text":"integer for the id, and provide a custom initializer so that the id is provided first:","type":"text"}]},{"type":"codeListing","code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, using this initializer with "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","type":"reference","isActive":true},{"type":"text","text":" will cause printing to crash because"},{"type":"text","text":" "},{"type":"text","text":"it will try to bitcast a "},{"type":"codeVoice","code":"(String, Int)"},{"type":"text","text":" struct into a "},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":" tuple:"}]},{"type":"codeListing","code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"syntax":"swift"}]}],"sections":[],"metadata":{"roleHeading":"Type Method","modules":[{"name":"CasePaths"}],"role":"symbol","title":"memberwise(_:)","extendedModule":"Parsing","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:9CasePaths0A4PathV","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"method"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/casepaths\/casepath\/memberwise(_:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/Conversion-Implementations"]]},"references":{"doc://co.pointfree.Parsing/documentation/CasePaths":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","title":"CasePaths","url":"\/documentation\/casepaths","abstract":[],"role":"collection","type":"topic"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/Conversion-Implementations":{"kind":"article","url":"\/documentation\/casepaths\/casepath\/conversion-implementations","title":"Conversion Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/Conversion-Implementations","type":"topic","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","navigatorTitle":[{"kind":"identifier","text":"CasePath"}],"title":"CasePath","url":"\/documentation\/casepaths\/casepath","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a root’s embedded","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}],"title":"Conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","url":"\/documentation\/parsing\/conversions","type":"topic"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath/memberwise(_:)":{"type":"topic","url":"\/documentation\/casepaths\/casepath\/memberwise(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath\/memberwise(_:)","abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"memberwise(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"title":"Conversions.Memberwise","abstract":[],"navigatorTitle":[{"text":"Memberwise","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","kind":"symbol","url":"\/documentation\/parsing\/conversions\/memberwise","type":"topic"}}}