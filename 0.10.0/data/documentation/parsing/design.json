{"metadata":{"roleHeading":"Article","modules":[{"name":"Parsing"}],"role":"article","title":"Design"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Protocol","type":"heading","text":"Protocol"},{"inlineContent":[{"type":"text","text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine"},{"type":"text","text":" "},{"type":"text","text":"framework. A parser is represented as a protocol that many types conform to, and then parser"},{"text":" ","type":"text"},{"text":"transformations (also known as “combinators”) are methods that return concrete types conforming to","type":"text"},{"text":" ","type":"text"},{"text":"the parser protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, to parse all the characters from the beginning of a substring until you encounter a"},{"type":"text","text":" "},{"type":"text","text":"comma you can use the "},{"code":"Prefix","type":"codeVoice"},{"type":"text","text":" parser:"}],"type":"paragraph"},{"code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The type of this parser is:","type":"text"}],"type":"paragraph"},{"code":["Prefix<Substring>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"We can ","type":"text"},{"code":".map","type":"codeVoice"},{"text":" on this parser in order to transform its output, which in this case is the string","type":"text"},{"text":" ","type":"text"},{"text":"“Hello”:","type":"text"}],"type":"paragraph"},{"code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The type of this parser is now:","type":"text"}]},{"code":["Parsers.Map<Prefix<Substring>, Substring>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of"},{"type":"text","text":" "},{"type":"text","text":"complexity when using these types, but comes with some performance benefits because Swift can"},{"type":"text","text":" "},{"type":"text","text":"usually inline and optimize away the creation of those nested types."}]},{"anchor":"Result-Builders","type":"heading","level":2,"text":"Result Builders"},{"type":"paragraph","inlineContent":[{"text":"The library takes advantage of Swift’s ","type":"text"},{"type":"codeVoice","code":"@resultBuilder"},{"text":" feature to make constructing complex parsers","type":"text"},{"text":" ","type":"text"},{"text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main","type":"text"},{"text":" ","type":"text"},{"text":"entry point into building a parser is the ","type":"text"},{"type":"codeVoice","code":"Parse"},{"text":" builder:","type":"text"}]},{"code":["Parse {","","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this builder block you can specify parsers that will be run one after another. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:"}]},{"code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}]},{"type":"paragraph","inlineContent":[{"text":"Many of the parsers and operators that come with the library are configured with parser builders","type":"text"},{"text":" ","type":"text"},{"text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where","type":"text"},{"text":" ","type":"text"},{"text":"parenthesized numbers are negative, we can use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference"},{"text":" parser builder:","type":"text"}]},{"code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"],"syntax":"swift","type":"codeListing"},{"anchor":"Operators","type":"heading","level":2,"text":"Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parser operators (also called “combinators”) are methods defined on the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol that"},{"type":"text","text":" "},{"type":"text","text":"return a parser. For example, the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5"},{"type":"text","text":" operator is a method that returns"},{"type":"text","text":" "},{"type":"text","text":"something called a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"type":"text","text":":"}]},{"code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"text":" is a dedicated type that implements the logic of the map operation. In","type":"text"},{"text":" ","type":"text"},{"text":"particular, in runs the upstream parser and then transforms its output:","type":"text"}]},{"code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Types that conform to the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true},{"type":"text","text":" protocol but are not constructed directly, and instead are"},{"type":"text","text":" "},{"type":"text","text":"constructed via operators, are housed in the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","isActive":true},{"type":"text","text":" type. It’s just an empty enum that"},{"type":"text","text":" "},{"type":"text","text":"serves as a namespace for such parsers."}]}]}],"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"article","abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"type":"topic","role":"article","url":"\/documentation\/parsing\/errormessages","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","title":"Error Messages"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"abstract":[{"text":"Returns a parser that transforms the output of this parser with a given closure.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO3MapV","text":"Map","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","title":"map(_:)","url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"url":"\/documentation\/parsing\/parsers\/map","navigatorTitle":[{"kind":"identifier","text":"Map"}],"kind":"symbol","abstract":[{"type":"text","text":"A parser that transforms the output of another parser with a given closure."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Map"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","role":"symbol","title":"Parsers.Map","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"role":"article","title":"String Abstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"url":"\/documentation\/parsing\/backtracking","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","title":"Backtracking","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"title":"OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"title":"Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"url":"\/documentation\/parsing\/gettingstarted","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","title":"Getting Started","kind":"article"}}}