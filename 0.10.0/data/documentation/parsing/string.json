{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Many of Swift’s string types conform to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" protocol, which allows you to use string types"},{"text":" ","type":"text"},{"text":"directly in a parser. For example, to parse two integers separated by a comma we can do:","type":"text"}],"type":"paragraph"},{"code":["try Parse {","  Int.parser()","  \",\"","  Int.parser()","}",".parse(\"123,456\") \/\/ (123, 456)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The string ","type":"text"},{"type":"codeVoice","code":"\",\""},{"text":" acts as a parser that consumes a comma from the beginning of an input and fails","type":"text"},{"text":" ","type":"text"},{"text":"if the input does not start with a comma.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift’s other string representations also conform to "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"type":"text","text":", such as "},{"type":"codeVoice","code":"UnicodeScalarView"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":". This allows you to consume strings from the beginning of an input in a more"},{"type":"text","text":" "},{"type":"text","text":"efficient manner than is possible with "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions"},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, we can conver the above parser to work on the level of "},{"code":"UTF8View","type":"codeVoice"},{"type":"text","text":"s, which is a"},{"type":"text","text":" "},{"type":"text","text":"collection of UTF-8 code units:"}],"type":"paragraph"},{"code":["try Parse {","  Int.parser()","  \",\".utf8","  Int.parser()","}",".parse(\"123,456\") \/\/ (123, 456)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Here ","type":"text"},{"type":"codeVoice","code":"\",\".utf8"},{"text":" is a ","type":"text"},{"type":"codeVoice","code":"String.UTF8View"},{"text":", which conforms to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" protocol. Also, by type","type":"text"},{"text":" ","type":"text"},{"text":"inference, Swift is choosing the overload of ","type":"text"},{"type":"codeVoice","code":"Int.parser()"},{"text":" that now works on ","type":"text"},{"type":"codeVoice","code":"UTF8View"},{"text":"s rather","type":"text"},{"text":" ","type":"text"},{"text":"than ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":"s. See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},{"text":" for more info.","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String"},"metadata":{"title":"String","role":"article","modules":[{"name":"Parsing"}],"roleHeading":"Article"},"seeAlsoSections":[{"title":"Common parsers","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"]}],"abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"abstract":[{"text":"A parser that waits for a call to its ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","isActive":true,"type":"reference"},{"text":" method before running the given closure to","type":"text"},{"text":" ","type":"text"},{"text":"create a parser for the given input.","type":"text"}],"navigatorTitle":[{"text":"Lazy","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Lazy","role":"symbol","url":"\/documentation\/parsing\/lazy","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Lazy","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/From":{"abstract":[],"navigatorTitle":[{"text":"From","kind":"identifier"}],"type":"topic","kind":"symbol","title":"From","role":"symbol","url":"\/documentation\/parsing\/from","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"From","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"abstract":[{"text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code","type":"text"},{"text":" ","type":"text"},{"text":"units.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Digits"}],"type":"topic","kind":"symbol","title":"Digits","role":"symbol","url":"\/documentation\/parsing\/digits","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Digits"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"navigatorTitle":[{"text":"PrefixThrough","kind":"identifier"}],"type":"topic","kind":"symbol","title":"PrefixThrough","role":"symbol","url":"\/documentation\/parsing\/prefixthrough","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixThrough","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"abstract":[{"text":"A parser that consumes whitespace from the beginning of input.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"type":"topic","kind":"symbol","title":"Whitespace","role":"symbol","url":"\/documentation\/parsing\/whitespace","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"abstract":[{"text":"A parser that consumes a floating-point number from the beginning of a string.","type":"text"}],"type":"topic","kind":"article","title":"Float","role":"article","url":"\/documentation\/parsing\/float","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"abstract":[{"text":"A parser that consumes a Boolean value from the beginning of a string.","type":"text"}],"type":"topic","kind":"article","title":"Bool","role":"article","url":"\/documentation\/parsing\/bool","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Stream","role":"symbol","url":"\/documentation\/parsing\/stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"abstract":[{"text":"A parser that consumes the first element from a collection.","type":"text"}],"navigatorTitle":[{"text":"First","kind":"identifier"}],"type":"topic","kind":"symbol","title":"First","role":"symbol","url":"\/documentation\/parsing\/first","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"abstract":[{"text":"A parser that consumes an integer from the beginning of a string.","type":"text"}],"type":"topic","kind":"article","title":"Int","role":"article","url":"\/documentation\/parsing\/int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"AnyParser","kind":"identifier"}],"type":"topic","kind":"symbol","title":"AnyParser","role":"symbol","url":"\/documentation\/parsing\/anyparser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"title":"End","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}],"url":"\/documentation\/parsing\/end","navigatorTitle":[{"kind":"identifier","text":"End"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"abstract":[],"deprecated":true,"navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"type":"topic","kind":"symbol","title":"FromSubstring","role":"symbol","url":"\/documentation\/parsing\/fromsubstring","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromSubstring","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"role":"symbol","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"title":"Parse","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"url":"\/documentation\/parsing\/parse","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"type":"topic","kind":"symbol","title":"PrefixUpTo","role":"symbol","url":"\/documentation\/parsing\/prefixupto","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Peek","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Peek","role":"symbol","url":"\/documentation\/parsing\/peek","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"abstract":[],"deprecated":true,"navigatorTitle":[{"text":"FromUnicodeScalarView","kind":"identifier"}],"type":"topic","kind":"symbol","title":"FromUnicodeScalarView","role":"symbol","url":"\/documentation\/parsing\/fromunicodescalarview","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromUnicodeScalarView","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"abstract":[{"text":"A parser that consumes the characters contained in a ","type":"text"},{"code":"CharacterSet","type":"codeVoice"},{"text":" from the beginning of a string.","type":"text"}],"type":"topic","kind":"article","title":"CharacterSet","role":"article","url":"\/documentation\/parsing\/characterset","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"abstract":[{"text":"A parser that returns the subsequence of input consumed by another parser.","type":"text"}],"navigatorTitle":[{"text":"Consumed","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Consumed","role":"symbol","url":"\/documentation\/parsing\/consumed","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Consumed","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"abstract":[{"text":"A parser-printer that consumes a case-iterable, raw representable value from the beginning of a","type":"text"},{"text":" ","type":"text"},{"text":"string.","type":"text"}],"type":"topic","kind":"article","title":"CaseIterable","role":"article","url":"\/documentation\/parsing\/caseiterable","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Optionally","role":"symbol","url":"\/documentation\/parsing\/optionally","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"title":"Prefix","navigatorTitle":[{"text":"Prefix","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","url":"\/documentation\/parsing\/prefix","kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"navigatorTitle":[{"text":"Rest","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Rest","role":"symbol","url":"\/documentation\/parsing\/rest","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Always","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Always","role":"symbol","url":"\/documentation\/parsing\/always","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"abstract":[{"text":"A parser that always fails, no matter the input.","type":"text"}],"navigatorTitle":[{"text":"Fail","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Fail","role":"symbol","url":"\/documentation\/parsing\/fail","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Not","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Not","role":"symbol","url":"\/documentation\/parsing\/not","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"role":"article","title":"String Abstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}],"navigatorTitle":[{"text":"Many","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Many","role":"symbol","url":"\/documentation\/parsing\/many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"title":"OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"abstract":[{"text":"A parser that discards the output of another parser.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Skip"}],"type":"topic","kind":"symbol","title":"Skip","role":"symbol","url":"\/documentation\/parsing\/skip","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}]},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"abstract":[{"text":"A parser that consumes a ","type":"text"},{"code":"UUID","type":"codeVoice"},{"text":" value from the beginning of a string.","type":"text"}],"type":"topic","kind":"article","title":"UUID","role":"article","url":"\/documentation\/parsing\/uuid","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"abstract":[],"deprecated":true,"navigatorTitle":[{"text":"Newline","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Newline","role":"symbol","url":"\/documentation\/parsing\/newline","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"abstract":[{"text":"A parser that parses a sequence of elements from its input.","type":"text"}],"navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"type":"topic","kind":"symbol","title":"StartsWith","role":"symbol","url":"\/documentation\/parsing\/startswith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"abstract":[],"deprecated":true,"navigatorTitle":[{"text":"FromUTF8View","kind":"identifier"}],"type":"topic","kind":"symbol","title":"FromUTF8View","role":"symbol","url":"\/documentation\/parsing\/fromutf8view","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromUTF8View","kind":"identifier"}]}}}