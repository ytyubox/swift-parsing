{"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},"metadata":{"modules":[{"name":"Parsing"}],"roleHeading":"Article","role":"article","title":"Backtracking"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Backtracking is the process of restoring an input to its original value when parsing fails. While it"},{"type":"text","text":" "},{"type":"text","text":"can be very useful, backtracking can lead to more complicated parser logic than necessary, and"},{"type":"text","text":" "},{"text":"backtracking too often can lead to performance issues. For this reason, most parsers are not","type":"text"},{"text":" ","type":"text"},{"text":"required to backtrack, and can therefore fail ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"text":" still consume from the input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The primary way to make use of backtracking in your parsers is through the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"tries many parsers on an input and chooses the first that succeeds. This allows you to try many"},{"type":"text","text":" "},{"type":"text","text":"parsers on the same input, regardless of how much each parser consumes:"}]},{"type":"codeListing","syntax":"swift","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"]},{"text":"When to backtrack in your parsers?","type":"heading","anchor":"When-to-backtrack-in-your-parsers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only use the parsers and operators that ship with this library, and in particular you do not"},{"type":"text","text":" "},{"type":"text","text":"create custom conformances to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" protocol, then you never need to worry about explicitly"},{"type":"text","text":" "},{"type":"text","text":"backtracking your input because it will be handled for you automatically. The primary way to allow"},{"type":"text","text":" "},{"type":"text","text":"for backtracking is via the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser, but there are a few other parsers that also backtrack"},{"type":"text","text":" "},{"type":"text","text":"internally."}]},{"type":"paragraph","inlineContent":[{"text":"One such example is the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},{"text":" parser, which transforms any parser into one that cannot fail","type":"text"},{"text":" ","type":"text"},{"text":"by catching any thrown errors and returning ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil","try parser.parse(\"Hello, true world!\") \/\/ true"]},{"type":"paragraph","inlineContent":[{"text":"If the parser captured inside ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},{"text":" fails then it backtracks the input to its state before","type":"text"},{"text":" ","type":"text"},{"text":"the parser ran. In particular, if the ","type":"text"},{"code":"Bool.parser()","type":"codeVoice"},{"text":" fails then it will make sure to undo","type":"text"},{"text":" ","type":"text"},{"text":"consuming the leading space “ “ so that later parsers can try.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Another example of a parser that internally backtracks is the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"operator, which coalesces any error thrown by a parser into a default output value:","type":"text"}]},{"syntax":"swift","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","    .replaceError(with: false)","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ false","try parser.parse(\"Hello, true world!\") \/\/ true"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"It backtracks the input to its original value when the parser fails so that later parsers can try.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The only time you need to worry about explicitly backtracking input is when making your own","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference"},{"text":" conformances. As a general rule of thumb, if your parser recovers from all failures","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"codeVoice","code":"parse"},{"text":" method then it should backtrack the input to its state before the error was thrown.","type":"text"},{"text":" ","type":"text"},{"text":"This is exactly how ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","type":"reference"},{"text":" work.","type":"text"}]},{"text":"Performance","level":2,"anchor":"Performance","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If used naively, backtracking can lead to less performant parsing code. For example, if we wanted to","type":"text"},{"text":" ","type":"text"},{"text":"parse two integers from a string that were separated by either a dash “-” or slash “\/”, then we","type":"text"},{"text":" ","type":"text"},{"text":"could write this as:","type":"text"}]},{"syntax":"swift","code":["OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() } \/\/ 1️⃣","  Parse { Int.parser(); \"\/\"; Int.parser() } \/\/ 2️⃣","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, parsing slash-separated integers is not going to be performant because it will first run"},{"type":"text","text":" "},{"type":"text","text":"the entire 1️⃣ parser until it fails, then backtrack to the beginning, and run the 2️⃣ parser. In"},{"type":"text","text":" "},{"type":"text","text":"particular, the first integer will get parsed twice, unnecessarily repeating that work."}]},{"type":"paragraph","inlineContent":[{"text":"On the  other hand, we can factor out the common work of the parser and localize the backtracking","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"text":" work to make a much more performant parser:","type":"text"}]},{"syntax":"swift","code":["Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can even write a benchmark to measure the performance difference:"}]},{"syntax":"swift","code":["let first = OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() }","  Parse { Int.parser(); \"\/\"; Int.parser() }","}","benchmark(\"First\") {","  precondition(try! first.parse(\"100\/200\") == (100, 200))","}","let second = Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}","benchmark(\"Second\") {","  precondition(try! second.parse(\"100\/200\") == (100, 200))","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Running this produces the following results:","type":"text"}]},{"syntax":null,"code":["name   time        std        iterations","----------------------------------------","First  1500.000 ns ±  19.75 %     856753","Second  917.000 ns ±  15.89 %    1000000"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second parser takes only 60% of the time to run that the first parser does."}]}]}],"abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"sections":[],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"url":"\/documentation\/parsing\/gettingstarted","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","title":"Getting Started","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Optionally","role":"symbol","url":"\/documentation\/parsing\/optionally","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"title":"OneOf","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"url":"\/documentation\/parsing\/design","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","type":"topic","title":"Design","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/replaceError(with:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"replaceError(with:)","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"url":"\/documentation\/parsing\/parser\/replaceerror(with:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"type":"topic","role":"article","url":"\/documentation\/parsing\/errormessages","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","title":"Error Messages"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","type":"topic","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"role":"article","title":"String Abstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions"}}}