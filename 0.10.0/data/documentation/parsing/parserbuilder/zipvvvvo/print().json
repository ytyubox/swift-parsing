{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVO","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVO\/ParserPrinter-Implementations"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVO\/print()","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"() "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"A nebulous value.","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/parsing\/parserbuilder\/zipvvvvo\/print()"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","metadata":{"roleHeading":"Instance Method","externalID":"s:7Parsing13ParserPrinterPA2A19_EmptyInitializable5InputRpzyt6OutputRtzrlE5printAFyKF::SYNTHESIZED::s:7Parsing13ParserBuilderO8ZipVVVVOV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"modules":[{"name":"Parsing"}],"symbolKind":"method","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"_EmptyInitializable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"extendedModule":"Parsing","role":"symbol","title":"print()"},"sections":[],"abstract":[{"text":"Attempts to print a nebulous piece of data.","type":"text"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVVO/ParserPrinter-Implementations":{"type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVO\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","abstract":[],"url":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/parserprinter-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVVO":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ZipVVVVO","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"text":"ZipVVVVO","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvvvo","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVO","kind":"symbol","title":"ParserBuilder.ZipVVVVO"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"title":"ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"title":"Parse","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"url":"\/documentation\/parsing\/parse","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVVO/print()":{"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"() "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVO\/print()","url":"\/documentation\/parsing\/parserbuilder\/zipvvvvo\/print()","title":"print()","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"_EmptyInitializable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Void","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"text":"Attempts to print a nebulous piece of data.","type":"text"}]}}}