{"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]}]},{"parameters":[{"name":"input","content":[{"inlineContent":[{"type":"text","text":"A nebulous, mutable piece of data to be incrementally printed into."}],"type":"paragraph"}]}],"kind":"parameters"}],"metadata":{"modules":[{"name":"Parsing"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Output"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":".","type":"text"}]},"externalID":"s:7Parsing13ParserPrinterPAAyt6OutputRtzrlE5print4intoy5InputQzz_tKF::SYNTHESIZED::s:7Parsing10StartsWithV","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"role":"symbol","roleHeading":"Instance Method","title":"print(into:)","extendedModule":"Parsing","symbolKind":"method"},"abstract":[{"text":"Attempts to print into a nebulous piece of data.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/startswith\/print(into:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/print(into:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"abstract":[{"text":"A parser that parses a sequence of elements from its input.","type":"text"}],"navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"type":"topic","kind":"symbol","title":"StartsWith","role":"symbol","url":"\/documentation\/parsing\/startswith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/ParserPrinter-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/startswith\/parserprinter-implementations","abstract":[],"type":"topic","role":"collectionGroup","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/print(into:)":{"role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/parsing\/startswith\/print(into:)","abstract":[{"text":"Attempts to print into a nebulous piece of data.","type":"text"}],"title":"print(into:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"print","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/print(into:)"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"}}}