{"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/parse(_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/rest\/parse(_:)"]}],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"sections":[],"metadata":{"roleHeading":"Instance Method","title":"parse(_:)","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Input"}],"modules":[{"name":"Parsing"}],"role":"symbol","externalID":"s:7Parsing4RestV5parseyxxzKF"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A nebulous, mutable piece of data to be incrementally parsed.","type":"text"}],"type":"paragraph"}],"name":"input"}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"A more well-structured value parsed from the given input.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"navigatorTitle":[{"text":"Rest","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Rest","role":"symbol","url":"\/documentation\/parsing\/rest","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest/parse(_:)":{"kind":"symbol","title":"parse(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/parse(_:)","url":"\/documentation\/parsing\/rest\/parse(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}]}}}