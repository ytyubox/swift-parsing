{"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/rest\/replaceerror(with:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/Parser-Implementations"]]},"kind":"symbol","metadata":{"roleHeading":"Instance Method","extendedModule":"Parsing","role":"symbol","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"externalID":"s:7Parsing6ParserPAAE12replaceError4withAA7ParsersO07ReplaceD0Vy_xG6OutputQz_tF::SYNTHESIZED::s:7Parsing4RestV","title":"replaceError(with:)","symbolKind":"method"},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/ReplaceError","kind":"typeIdentifier","text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An output to return should the upstream parser fail."}],"type":"paragraph"}],"name":"output"}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that never fails."}]}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for providing a default output for a parser."}]},{"type":"paragraph","inlineContent":[{"text":"For example, we could create a parser that parses a plus or minus sign and maps the result to","type":"text"},{"text":" ","type":"text"},{"text":"a positive or negative multiplier respectively, or else defaults to a positive multiplier:","type":"text"}]},{"code":["let sign = OneOf {","  \"+\".map { 1 }","  \"-\".map { -1 }","}",".replaceError(with: 1)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Notably this parser is non-throwing:","type":"text"}]},{"code":["var input = \"-123\"[...]","","\/\/ No `try` required:","sign.parse(&input)  \/\/ -1","input               \/\/ \"123\"","","\/\/ Simply returns the default when parsing fails:","sign.parse(&input)  \/\/ 1"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means it can be used to turn throwing parsers into non-throwing ones, which is important"},{"type":"text","text":" "},{"type":"text","text":"for building up complex parsers that cannot fail."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/replaceError(with:)","interfaceLanguage":"swift"},"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Rest/Parser-Implementations":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/Parser-Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/rest\/parser-implementations","title":"Parser Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"navigatorTitle":[{"text":"Rest","kind":"identifier"}],"type":"topic","kind":"symbol","title":"Rest","role":"symbol","url":"\/documentation\/parsing\/rest","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/ReplaceError":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/ReplaceError","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReplaceError","kind":"identifier"}],"navigatorTitle":[{"text":"ReplaceError","kind":"identifier"}],"url":"\/documentation\/parsing\/parsers\/replaceerror","kind":"symbol","role":"symbol","title":"Parsers.ReplaceError"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"title":"Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest/replaceError(with:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/replaceError(with:)","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"url":"\/documentation\/parsing\/rest\/replaceerror(with:)","role":"symbol","title":"replaceError(with:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic"}}}