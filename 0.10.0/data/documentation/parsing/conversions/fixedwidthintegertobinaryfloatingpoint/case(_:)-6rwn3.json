{"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/case(_:)-6rwn3","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","kind":"typeIdentifier","text":"CasePath","preciseIdentifier":"s:9CasePaths0A4PathV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"embed","content":[{"type":"paragraph","inlineContent":[{"text":"An embed function where ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":" directly maps to the memory","type":"text"},{"text":" ","type":"text"},{"text":"layout of ","type":"text"},{"code":"Enum","type":"codeVoice"},{"text":", for example the internal, default initializer that is automatically","type":"text"},{"text":" ","type":"text"},{"text":"synthesized for structs.","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conversion that can embed the associated values of an enum case into the case,"},{"type":"text","text":" "},{"type":"text","text":"and extract the associated values from the case."}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"type":"text","text":" into an enum:"}]},{"type":"codeListing","syntax":"swift","code":["enum Expression {","  case add(Int, Int)","  ...","}","","let add = ParsePrint(.case(Expression.add)) {","  Int.parser()","  \"+\"","  Int.parser()","}","try add.parse(\"1+2\")  \/\/ Expression.add(1, 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To transform the output of a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"type":"text","text":" into a struct, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)"},{"type":"text","text":"."}]}]}],"metadata":{"modules":[{"name":"Parsing"}],"extendedModule":"Parsing","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"externalID":"s:7Parsing10ConversionPAAE4casey9CasePaths0D4PathVyqd_0_qd__Gqd_0_qd__cAHRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO38FixedWidthIntegerToBinaryFloatingPointV","title":"case(_:)","symbolKind":"method","roleHeading":"Type Method"},"sections":[],"variants":[{"paths":["\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/case(_:)-6rwn3"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"type":"text","text":" "},{"type":"text","text":"associated values."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/Conversion-Implementations"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","navigatorTitle":[{"kind":"identifier","text":"CasePath"}],"title":"CasePath","url":"\/documentation\/casepaths\/casepath","abstract":[{"text":"A path that supports embedding a value in a root and attempting to extract a root’s embedded","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint/memberwise(_:)":{"type":"topic","abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"title":"memberwise(_:)","url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/memberwise(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}],"title":"Conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","url":"\/documentation\/parsing\/conversions","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint/Conversion-Implementations":{"role":"collectionGroup","url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/conversion-implementations","title":"Conversion Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/Conversion-Implementations","kind":"article","abstract":[],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint":{"type":"topic","abstract":[{"text":"A conversion from an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" to a ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FixedWidthIntegerToBinaryFloatingPoint","kind":"identifier"}],"url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint","title":"Conversions.FixedWidthIntegerToBinaryFloatingPoint","kind":"symbol","navigatorTitle":[{"text":"FixedWidthIntegerToBinaryFloatingPoint","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint/case(_:)-6rwn3":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/case(_:)-6rwn3","abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"type":"text","text":" "},{"type":"text","text":"associated values."}],"title":"case(_:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/case(_:)-6rwn3"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"title":"ParserPrinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"url":"\/documentation\/parsing\/parserprinter","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"}}}