{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"variants":[{"paths":["\/documentation\/parsing\/backtracking"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Backtracking is the process of restoring an input to its original value when parsing fails. While it","type":"text"},{"text":" ","type":"text"},{"text":"can be very useful, backtracking can lead to more complicated parser logic than necessary, and","type":"text"},{"text":" ","type":"text"},{"text":"backtracking too often can lead to performance issues. For this reason, most parsers are not","type":"text"},{"text":" ","type":"text"},{"text":"required to backtrack, and can therefore fail ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"text":" still consume from the input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The primary way to make use of backtracking in your parsers is through the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser, which"},{"type":"text","text":" "},{"type":"text","text":"tries many parsers on an input and chooses the first that succeeds. This allows you to try many"},{"type":"text","text":" "},{"type":"text","text":"parsers on the same input, regardless of how much each parser consumes:"}]},{"syntax":"swift","type":"codeListing","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"]},{"level":2,"text":"When to backtrack in your parsers?","type":"heading","anchor":"When-to-backtrack-in-your-parsers?"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only use the parsers and operators that ship with this library, and in particular you do not"},{"type":"text","text":" "},{"type":"text","text":"create custom conformances to the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"type":"text","text":" protocol, then you never need to worry about explicitly"},{"type":"text","text":" "},{"type":"text","text":"backtracking your input because it will be handled for you automatically. The primary way to allow"},{"type":"text","text":" "},{"type":"text","text":"for backtracking is via the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser, but there are a few other parsers that also backtrack"},{"type":"text","text":" "},{"type":"text","text":"internally."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One such example is the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"reference","isActive":true},{"type":"text","text":" parser, which transforms any parser into one that cannot fail"},{"type":"text","text":" "},{"type":"text","text":"by catching any thrown errors and returning "},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil","try parser.parse(\"Hello, true world!\") \/\/ true"]},{"type":"paragraph","inlineContent":[{"text":"If the parser captured inside ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","isActive":true},{"text":" fails then it backtracks the input to its state before","type":"text"},{"text":" ","type":"text"},{"text":"the parser ran. In particular, if the ","type":"text"},{"code":"Bool.parser()","type":"codeVoice"},{"text":" fails then it will make sure to undo","type":"text"},{"text":" ","type":"text"},{"text":"consuming the leading space “ “ so that later parsers can try.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another example of a parser that internally backtracks is the "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"operator, which coalesces any error thrown by a parser into a default output value:"}]},{"syntax":"swift","type":"codeListing","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","    .replaceError(with: false)","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ false","try parser.parse(\"Hello, true world!\") \/\/ true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It backtracks the input to its original value when the parser fails so that later parsers can try."}]},{"type":"paragraph","inlineContent":[{"text":"The only time you need to worry about explicitly backtracking input is when making your own","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" conformances. As a general rule of thumb, if your parser recovers from all failures","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"code":"parse","type":"codeVoice"},{"text":" method then it should backtrack the input to its state before the error was thrown.","type":"text"},{"text":" ","type":"text"},{"text":"This is exactly how ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","type":"reference","isActive":true},{"text":" work.","type":"text"}]},{"level":2,"text":"Performance","type":"heading","anchor":"Performance"},{"type":"paragraph","inlineContent":[{"text":"If used naively, backtracking can lead to less performant parsing code. For example, if we wanted to","type":"text"},{"text":" ","type":"text"},{"text":"parse two integers from a string that were separated by either a dash “-” or slash “\/”, then we","type":"text"},{"text":" ","type":"text"},{"text":"could write this as:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() } \/\/ 1️⃣","  Parse { Int.parser(); \"\/\"; Int.parser() } \/\/ 2️⃣","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, parsing slash-separated integers is not going to be performant because it will first run"},{"type":"text","text":" "},{"type":"text","text":"the entire 1️⃣ parser until it fails, then backtrack to the beginning, and run the 2️⃣ parser. In"},{"type":"text","text":" "},{"type":"text","text":"particular, the first integer will get parsed twice, unnecessarily repeating that work."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On the  other hand, we can factor out the common work of the parser and localize the backtracking"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true},{"type":"text","text":" work to make a much more performant parser:"}]},{"syntax":"swift","type":"codeListing","code":["Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}"]},{"type":"paragraph","inlineContent":[{"text":"We can even write a benchmark to measure the performance difference:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let first = OneOf {","  Parse { Int.parser(); \"-\"; Int.parser() }","  Parse { Int.parser(); \"\/\"; Int.parser() }","}","benchmark(\"First\") {","  precondition(try! first.parse(\"100\/200\") == (100, 200))","}","let second = Parse {","  Int.parser()","  OneOf { \"-\"; \"\/\" }","  Int.parser()","}","benchmark(\"Second\") {","  precondition(try! second.parse(\"100\/200\") == (100, 200))","}"]},{"type":"paragraph","inlineContent":[{"text":"Running this produces the following results:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["name   time        std        iterations","----------------------------------------","First  1500.000 ns ±  19.75 %     856753","Second  917.000 ns ±  15.89 %    1000000"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second parser takes only 60% of the time to run that the first parser does."}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"]}],"metadata":{"role":"article","title":"Backtracking","modules":[{"name":"Parsing"}],"roleHeading":"Article"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","url":"\/documentation\/parsing\/design","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","role":"article","kind":"article","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","role":"symbol","navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"url":"\/documentation\/parsing\/optionally","type":"topic","title":"Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error Messages","url":"\/documentation\/parsing\/errormessages","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","role":"article","kind":"article","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"role":"article","type":"topic","title":"String Abstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"kind":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","url":"\/documentation\/parsing\/oneof","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"title":"OneOf","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/replaceError(with:)":{"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"replaceError(with:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","role":"symbol","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"title":"Getting Started","url":"\/documentation\/parsing\/gettingstarted","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article","kind":"article","abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}]}}}