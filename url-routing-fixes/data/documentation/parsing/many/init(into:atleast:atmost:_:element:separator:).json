{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:separator:)"},"variants":[{"paths":["\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:separator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initialResult"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"externalParam","text":"atLeast"},{"kind":"text","text":" "},{"kind":"internalParam","text":"minimum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"atMost"},{"kind":"text","text":" "},{"kind":"internalParam","text":"maximum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"updateAccumulatingResult"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Separator"},{"kind":"text","text":")"}]}],"kind":"declarations"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many"]]},"sections":[],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Use the initializer that takes a Length (Int or range expression), instead.","type":"text"}]}],"metadata":{"extendedModule":"Parsing","roleHeading":"Initializer","symbolKind":"init","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", "},{"code":"Separator","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", "},{"code":"Terminator","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"type":"text","text":", "},{"code":"Printability","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Never","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Element.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Separator.Input","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"init(into:atLeast:atMost:_:element:separator:)","externalID":"s:7Parsing4ManyVA2A6AlwaysVy5InputQzytGRs1_s5NeverORs2_rlE4into7atLeast0G4Most_7element9separatorACyxq_q0_AhJGq__S2iyq_z_6OutputQztKcxyXEq0_yXEtcfc","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"externalParam","text":"atLeast"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"atMost"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Separator"},{"kind":"text","text":")"}],"platforms":[],"modules":[{"name":"Parsing"}],"role":"symbol"},"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"url":"\/documentation\/parsing\/many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","title":"Many","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol","navigatorTitle":[{"text":"Many","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(into:atLeast:atMost:_:element:separator:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:separator:)","url":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:separator:)","abstract":[],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Separator","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Terminator","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Printability","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Never","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Element.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Separator.Input","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","title":"init(into:atLeast:atMost:_:element:separator:)","type":"topic","deprecated":true,"kind":"symbol"}}}