{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVO","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVO\/Parser-Implementations"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"output","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/ReplaceError","text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A parser that never fails."}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"content":[{"inlineContent":[{"text":"An output to return should the upstream parser fail.","type":"text"}],"type":"paragraph"}],"name":"output"}],"kind":"parameters"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Useful for providing a default output for a parser.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, we could create a parser that parses a plus or minus sign and maps the result to"},{"type":"text","text":" "},{"type":"text","text":"a positive or negative multiplier respectively, or else defaults to a positive multiplier:"}]},{"syntax":"swift","type":"codeListing","code":["let sign = OneOf {","  \"+\".map { 1 }","  \"-\".map { -1 }","}",".replaceError(with: 1)"]},{"type":"paragraph","inlineContent":[{"text":"Notably this parser is non-throwing:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var input = \"-123\"[...]","","\/\/ No `try` required:","sign.parse(&input)  \/\/ -1","input               \/\/ \"123\"","","\/\/ Simply returns the default when parsing fails:","sign.parse(&input)  \/\/ 1"]},{"type":"paragraph","inlineContent":[{"text":"This means it can be used to turn throwing parsers into non-throwing ones, which is important","type":"text"},{"text":" ","type":"text"},{"text":"for building up complex parsers that cannot fail.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parserbuilder\/zipvvo\/replaceerror(with:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","title":"replaceError(with:)","externalID":"s:7Parsing6ParserPAAE12replaceError4withAA7ParsersO07ReplaceD0Vy_xG6OutputQz_tF::SYNTHESIZED::s:7Parsing13ParserBuilderO6ZipVVOV","extendedModule":"Parsing","roleHeading":"Instance Method","modules":[{"name":"Parsing"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method"},"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVO\/replaceError(with:)","interfaceLanguage":"swift"},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVO/replaceError(with:)":{"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"title":"replaceError(with:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVO\/replaceError(with:)","url":"\/documentation\/parsing\/parserbuilder\/zipvvo\/replaceerror(with:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/ReplaceError":{"role":"symbol","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parsers\/replaceerror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReplaceError","kind":"identifier"}],"navigatorTitle":[{"text":"ReplaceError","kind":"identifier"}],"title":"Parsers.ReplaceError","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/ReplaceError"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"title":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parsers","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"navigatorTitle":[{"kind":"identifier","text":"Parse"}],"title":"Parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parse","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"title":"ParserBuilder","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parserbuilder","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVO/Parser-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/parsing\/parserbuilder\/zipvvo\/parser-implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVO\/Parser-Implementations","title":"Parser Implementations","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVO":{"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ZipVVO","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvo","abstract":[],"navigatorTitle":[{"text":"ZipVVO","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVO","title":"ParserBuilder.ZipVVO","role":"symbol"}}}