{"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"parse(_:)","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"P0","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> (","kind":"text"},{"text":"P1","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P2","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P3","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing13ParserBuilderO8ZipVOOOVV5parsey6OutputQy__AGQy0_AGQy1_t5InputQzzKF"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parserbuilder\/zipvooov\/parse(_:)"]}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVOOOV\/parse(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVOOOV"]]},"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"P0"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ("},{"text":"P1","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P2","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P3","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"A more well-structured value parsed from the given input.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A nebulous, mutable piece of data to be incrementally parsed.","type":"text"}],"type":"paragraph"}],"name":"input"}]}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"navigatorTitle":[{"kind":"identifier","text":"Parse"}],"title":"Parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parse","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVOOOV":{"title":"ParserBuilder.ZipVOOOV","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVOOOV","kind":"symbol","url":"\/documentation\/parsing\/parserbuilder\/zipvooov","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ZipVOOOV","kind":"identifier"}],"navigatorTitle":[{"text":"ZipVOOOV","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"title":"ParserBuilder","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parserbuilder","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVOOOV/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVOOOV\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"P0"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ("},{"kind":"typeIdentifier","text":"P1"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P2"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P3"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","title":"parse(_:)","url":"\/documentation\/parsing\/parserbuilder\/zipvooov\/parse(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"}}}