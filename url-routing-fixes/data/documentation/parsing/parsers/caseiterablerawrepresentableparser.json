{"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CaseIterableRawRepresentableParser"}],"symbolKind":"struct","role":"symbol","extendedModule":"Parsing","roleHeading":"Structure","title":"Parsers.CaseIterableRawRepresentableParser","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing7ParsersO34CaseIterableRawRepresentableParserV","navigatorTitle":[{"kind":"identifier","text":"CaseIterableRawRepresentableParser"}]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser\/ParserPrinter-Implementations"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CaseIterableRawRepresentableParser","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Prefix","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s12CaseIterableP","text":"CaseIterable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SY","text":"RawRepresentable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Prefix","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Prefix","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RawValue","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SL","text":"Comparable","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]}],"relationshipsSections":[{"type":"conformsTo","title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","abstract":[{"text":"A ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"url":"\/documentation\/parsing\/parserprinter","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"code":"Input.SubSequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CaseIterable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RawRepresentable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Prefix","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Input.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Prefix.Element"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Output.RawValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]}},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CaseIterableRawRepresentableParser/Parser-Implementations":{"url":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser\/Parser-Implementations","title":"Parser Implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"title":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parsers","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CaseIterableRawRepresentableParser":{"url":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser","title":"Parsers.CaseIterableRawRepresentableParser","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CaseIterableRawRepresentableParser"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseIterableRawRepresentableParser"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CaseIterableRawRepresentableParser/parse(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser\/parse(_:)","role":"symbol","url":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}],"title":"parse(_:)","kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/CaseIterableRawRepresentableParser/ParserPrinter-Implementations":{"kind":"article","title":"ParserPrinter Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/parsing\/parsers\/caseiterablerawrepresentableparser\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/CaseIterableRawRepresentableParser\/ParserPrinter-Implementations","abstract":[]}}}