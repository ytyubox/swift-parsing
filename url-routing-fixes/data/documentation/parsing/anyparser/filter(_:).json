{"abstract":[{"type":"text","text":"Returns a parser that filters output from this parser when its output does not satisfy the"},{"type":"text","text":" "},{"type":"text","text":"given predicate."}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/filter(_:)","interfaceLanguage":"swift"},"metadata":{"title":"filter(_:)","modules":[{"name":"Parsing"}],"extendedModule":"Parsing","symbolKind":"method","externalID":"s:7Parsing6ParserPAAE6filteryAA7ParsersO6FilterVy_xGSb6OutputQzcF::SYNTHESIZED::s:7Parsing9AnyParserV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","roleHeading":"Instance Method"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/Parser-Implementations"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"kind":"text","text":": "},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},{"text":".","kind":"text"},{"text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A parser that filters its output."}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A closure that takes an output from this parser and returns a Boolean","type":"text"},{"text":" ","type":"text"},{"text":"value indicating whether the output should be returned.","type":"text"}],"type":"paragraph"}],"name":"predicate"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method is similar to "},{"type":"codeVoice","code":"Sequence.filter"},{"type":"text","text":" in the Swift standard library, as well as"},{"type":"text","text":" "},{"type":"codeVoice","code":"Publisher.filter"},{"type":"text","text":" in the Combine framework."}],"type":"paragraph"},{"inlineContent":[{"text":"This parser fails if the predicate is not satisfied on the output of the upstream parser. For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following parser consumes only even integers and so fails when an odd integer is used:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var input = \"43 Hello, world!\"[...]","let number = try Int.parser().filter { $0.isMultiple(of: 2) }.parse(&input)","\/\/ error: processed value 43 failed to satisfy predicate","\/\/  --> input:1:1-2","\/\/ 1 | 43 Hello, world!","\/\/   | ^^ processed input"]}]}],"variants":[{"paths":["\/documentation\/parsing\/anyparser\/filter(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","role":"symbol","title":"Parsers.Filter","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Filter","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Filter","kind":"identifier"}],"abstract":[{"text":"A parser that filters the output of an upstream parser when it does not satisfy a predicate.","type":"text"}],"url":"\/documentation\/parsing\/parsers\/filter","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/filter(_:)":{"url":"\/documentation\/parsing\/anyparser\/filter(_:)","abstract":[{"type":"text","text":"Returns a parser that filters output from this parser when its output does not satisfy the"},{"text":" ","type":"text"},{"text":"given predicate.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/filter(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Filter","preciseIdentifier":"s:7Parsing7ParsersO6FilterV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"filter(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/Parser-Implementations":{"url":"\/documentation\/parsing\/anyparser\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/Parser-Implementations","title":"Parser Implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"title":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parsers","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"title":"AnyParser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/anyparser","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"}}}