{"seeAlsoSections":[{"title":"Articles","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"sections":[],"abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"metadata":{"roleHeading":"Article","title":"String Abstractions","modules":[{"name":"Parsing"}],"role":"article"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Levels of abstraction","anchor":"Levels-of-abstraction","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The parsers in the library do not work on "},{"type":"codeVoice","code":"String"},{"type":"text","text":"s directly, and instead operate on "},{"inlineContent":[{"text":"views","type":"text"}],"type":"emphasis"},{"type":"text","text":" into a"},{"type":"text","text":" "},{"type":"text","text":"string, such as "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":", "},{"type":"codeVoice","code":"UnicodeScalarView"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":". Each of these types represents a"},{"type":"text","text":" "},{"type":"text","text":"particular kind of ‚Äúview‚Äù into some subset of a string, which means they are cheap to copy around,"},{"type":"text","text":" "},{"type":"text","text":"and it makes consuming elements from the beginning and end of the string very efficient since only"},{"type":"text","text":" "},{"type":"text","text":"their start and end index need to be mutated to point to different parts of the string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are tradeoffs to using each type:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"Substring","type":"codeVoice"},{"text":", like ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", is a collection of ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":"s, which are extended grapheme","type":"text"},{"text":" ","type":"text"},{"text":"clusters that most closely represents a single visual character one can see on the screen. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type is easy to use and hides a lot of the complexities of UTF8 from you (such as multiple byte"},{"type":"text","text":" "},{"type":"text","text":"sequences that represent the same visual character), and as such it is less efficient to use."},{"type":"text","text":" "},{"type":"text","text":"Its elements are variable width, which means scanning its elements is an O(n) operation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"UnicodeScalarView"},{"text":" is a collection of unicode scalars represented by the ","type":"text"},{"type":"codeVoice","code":"Unicode.Scalar"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"text":"Unicode scalars are 21-bit, and so not variable width like ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":", which makes scanning","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UnicodeScalarView"},{"text":"s more efficient, but at the cost of some additional complexity in the API.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, complex elements that can be represented by a single ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":", such as ‚Äúüá∫üá∏‚Äù,","type":"text"},{"text":" ","type":"text"},{"text":"are represented by multiple ","type":"text"},{"code":"Unicode.Scalar","type":"codeVoice"},{"text":" elements, ‚Äúüá∫‚Äù and ‚Äúüá∏‚Äù. When put together they","type":"text"},{"text":" ","type":"text"},{"text":"form the single extended grapheme cluster of the flag character.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Further, some "},{"code":"Character","type":"codeVoice"},{"type":"text","text":"s have multiple representations as collections of unicode scalars. For"},{"type":"text","text":" "},{"type":"text","text":"example, an ‚Äúe‚Äù with an accute accent only has one visual representation, yet there are two"},{"type":"text","text":" "},{"type":"text","text":"different sequences of unicode scalars that can represent that character:"}],"type":"paragraph"},{"code":["Array(\"√©\".unicodeScalars) \/\/ [233]","Array(\"eÃÅ\".unicodeScalars) \/\/ [101, 769]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can‚Äôt tell from looking at the character, but the first ‚Äú√©‚Äù is a single unicode scalar"},{"type":"text","text":" "},{"type":"text","text":"called a ‚ÄúLATIN SMALL LETTER E WITH ACUTE‚Äù and the second ‚ÄúeÃÅ‚Äù is two scalars, one just a plain"},{"type":"text","text":" "},{"type":"text","text":"‚Äúe‚Äù and the second a ‚ÄúCOMBINING ACUTE ACCENT‚Äù. Importantly, these two accented e‚Äôs are equal as"},{"type":"text","text":" "},{"type":"codeVoice","code":"Character"},{"type":"text","text":"s but unequal as "},{"type":"codeVoice","code":"UnicodeScalarView"},{"type":"text","text":"s:"}],"type":"paragraph"},{"code":["let e1 = \"\\u{00E9}\"","let e2 = \"e\\u{0301}\"","e1 == e2 \/\/ true","e1.unicodeScalars.elementsEqual(e2.unicodeScalars) \/\/ false"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"So, when parsing on the level of ","type":"text"},{"type":"codeVoice","code":"UnicodeScalarView"},{"text":" you have to be aware of these subtleties in","type":"text"},{"text":" ","type":"text"},{"text":"order to form a correct parser.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":" is a collection of "},{"type":"codeVoice","code":"Unicode.UTF8.CodeUnit"},{"type":"text","text":"s, which is just a typealias for "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":","},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"i.e."}],"type":"emphasis"},{"type":"text","text":", a single byte. This is an even lower-level representation of strings than"},{"type":"text","text":" "},{"type":"codeVoice","code":"UnicodeScalarView"},{"type":"text","text":", and scanning these collections is quite efficient, but at the cost of even"},{"type":"text","text":" "},{"type":"text","text":"more complexity."}]},{"type":"paragraph","inlineContent":[{"text":"For example, the non-ASCII characters described above have an even more complex representation","type":"text"},{"text":" ","type":"text"},{"text":"has UTF8 bytes:","type":"text"}]},{"code":["Array(\"√©\".utf8) \/\/ [195, 169]","Array(\"eÃÅ\".utf8) \/\/ [101, 204, 129]","Array(\"üá∫üá∏\".utf8) \/\/ [240, 159, 135, 186, 240, 159, 135, 184]"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"There‚Äôs even ","type":"text"},{"type":"codeVoice","code":"ArraySlice<UInt8>"},{"text":", which is just a raw collection of bytes. This can be even more","type":"text"},{"text":" ","type":"text"},{"text":"efficient to parse than ","type":"text"},{"type":"codeVoice","code":"UTF8View"},{"text":" because it does not require representing a valid UTF-8","type":"text"},{"text":" ","type":"text"},{"text":"string, but then you have no guarantees that you can losslessly convert it back into a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]}]}]},{"level":2,"text":"Mixing and matching abstraction levels","anchor":"Mixing-and-matching-abstraction-levels","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to plug together parsers that work on different abstraction levels so that you can"},{"type":"text","text":" "},{"type":"text","text":"decide where you want to trade correctness for performance and vice-versa."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have an enum representing a few cities that you want to parse a string"},{"type":"text","text":" "},{"type":"text","text":"into:"}]},{"code":["enum City {","  case losAngeles","  case newYork","  case sanJose","}","","let city = OneOf {","  \"Los Angeles\".map { City.losAngeles }","  \"New York\".map { City.newYork }","  \"San Jos√©\".map { City.sanJose }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the most part this parser could work on the level of UTF-8 because it is mostly dealing with"},{"type":"text","text":" "},{"type":"text","text":"plain ASCII characters for which there are not multiple ways of representing the same visual"},{"type":"text","text":" "},{"type":"text","text":"character. The only exception is ‚ÄúSan Jos√©‚Äù, which has an accented ‚Äúe‚Äù that can be represented"},{"type":"text","text":" "},{"type":"text","text":"by two different sequences of bytes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" abstraction is hiding those details from us because this parser will happily parse"},{"type":"text","text":" "},{"type":"text","text":"both representations of ‚ÄúSan Jos√©‚Äù from a string:"}]},{"code":["city.parse(\"San Jos\\u{00E9}\")  \/\/ ‚úÖ","city.parse(\"San Jose\\u{0301}\") \/\/ ‚úÖ"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But, if we naively convert this parser to work on the level of "},{"code":"UTF8View","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["let city = OneOf {","  \"Los Angeles\".utf8.map { City.losAngeles }","  \"New York\".utf8.map { City.newYork }","  \"San Jos√©\".utf8.map { City.sanJose }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We have accidentally introduced a bug into the parser in which it recognizes one version of","type":"text"},{"text":" ","type":"text"},{"text":"‚ÄúSan Jos√©‚Äù, but not the other:","type":"text"}]},{"code":["city.parse(\"San Jos\\u{00E9}\".utf8)  \/\/ ‚úÖ","city.parse(\"San Jose\\u{0301}\".utf8) \/\/ ‚ùå"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"One way to fix this would be to add another case to the ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":" for this alternate representation","type":"text"},{"text":" ","type":"text"},{"text":"of ‚ÄúSan Jos√©‚Äù:","type":"text"}]},{"code":["let city = OneOf {","  \"Los Angeles\".utf8.map { City.losAngeles }","  \"New York\".utf8.map { City.newYork }","  \"San Jos\\u{00E9}\".utf8.map { City.sanJose }","  \"San Jose\\u{0301}\".utf8.map { City.sanJose }","}","","city.parse(\"San Jos\\u{00E9}\".utf8)  \/\/ ‚úÖ","city.parse(\"San Jose\\u{0301}\".utf8) \/\/ ‚úÖ"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does work, but you are now responsible for understanding the ins and outs of UTF-8"},{"type":"text","text":" "},{"type":"text","text":"normalization. UTF-8 is incredibly complex and Swift does a lot of work to hide that complexity"},{"type":"text","text":" "},{"type":"text","text":"from you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there‚Äôs no need to parse everything on the level of "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" just because this one"},{"type":"text","text":" "},{"type":"text","text":"parser needs to. We can parse everything on the level of "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":" and then parse just ‚ÄúSan Jos√©‚Äù"},{"type":"text","text":" "},{"type":"text","text":"on the level of "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":". We do this by using the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","isActive":true,"type":"reference"},{"type":"text","text":" parser, which allows us to"},{"type":"text","text":" "},{"type":"text","text":"temporarily leave the "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":" world to work in the "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" world:"}]},{"code":["let city = OneOf {","  \"Los Angeles\".utf8.map { City.losAngeles }","  \"New York\".utf8.map { City.newYork }","  FromSubstring { \"San Jos√©\" }.map { City.sanJose }","}","","city.parse(\"San Jos\\u{00E9}\".utf8)  \/\/ ‚úÖ","city.parse(\"San Jose\\u{0301}\".utf8) \/\/ ‚úÖ"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will run the ‚ÄúSan Jos√©‚Äù parser on the level of "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":", meaning it will handle all the"},{"type":"text","text":" "},{"type":"text","text":"complexities of UTF8 normalization so that we don‚Äôt have to think about it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we want to be "},{"type":"emphasis","inlineContent":[{"text":"really","type":"text"}]},{"type":"text","text":" pedantic we can even decide to parse only the ‚Äú√©‚Äù character on the"},{"type":"text","text":" "},{"type":"text","text":"level of "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" and leave everything else to "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":":"}]},{"code":["let city = OneOf {","  \"Los Angeles\".utf8.map { City.losAngeles }","  \"New York\".utf8.map { City.newYork }","  Parse {","    \"San Jos\".utf8","    FromSubstring { \"√©\" }","  }","  .map { City.sanJose }","}","","city.parse(\"San Jos\\u{00E9}\".utf8)  \/\/ ‚úÖ","city.parse(\"San Jose\\u{0301}\".utf8) \/\/ ‚úÖ"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We don‚Äôt necessarily recommend being this pedantic in general, at least not without benchmarking to","type":"text"},{"text":" ","type":"text"},{"text":"make sure it is worth it. But it does demonstrate how you can be very precise with which abstraction","type":"text"},{"text":" ","type":"text"},{"text":"levels you want to work on.","type":"text"}]}]}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/stringabstractions"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","url":"\/documentation\/parsing\/design","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","role":"article","kind":"article","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"title":"Getting Started","url":"\/documentation\/parsing\/gettingstarted","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article","kind":"article","abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"url":"\/documentation\/parsing\/fromsubstring","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","title":"FromSubstring","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","kind":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","url":"\/documentation\/parsing\/backtracking","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error Messages","url":"\/documentation\/parsing\/errormessages","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","role":"article","kind":"article","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into parsers."}]}}}