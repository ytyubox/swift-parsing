{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneof"]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"topicSections":[{"title":"Builder","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder"]},{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"],"generated":true}],"sections":[],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo"}],"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"metadata":{"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"title":"OneOf","externalID":"s:7Parsing5OneOfV","modules":[{"name":"Parsing"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"symbolKind":"struct","role":"symbol"},"seeAlsoSections":[{"title":"Common parsers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"],"generated":true}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this parser to list out a number of parsers in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder"},{"type":"text","text":" result builder block."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example uses "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference"},{"type":"text","text":" to parse an enum value. To do so, it spells out a list of"},{"type":"text","text":" "},{"type":"text","text":"parsers to "},{"code":"OneOf","type":"codeVoice"},{"type":"text","text":", one for each case:"}]},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser fails if every parser inside fails:"}]},{"type":"codeListing","code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are parsing input that should coalesce into some default, avoid using a final "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always"},{"type":"text","text":" "},{"type":"text","text":"parser, and instead opt for a trailing "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/replaceError(with:)"},{"type":"text","text":", which returns a parser that"},{"type":"text","text":" "},{"type":"text","text":"cannot fail:"}]},{"type":"codeListing","code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"syntax":"swift"},{"text":"Specificity","type":"heading","level":2,"anchor":"Specificity"},{"type":"paragraph","inlineContent":[{"text":"The order of the parsers in the above ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" does not matter because each of “€”, “£” and “$”","type":"text"},{"text":" ","type":"text"},{"text":"are mutually exclusive, i.e. at most one will succeed on any given input.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple","type":"text"},{"text":" ","type":"text"},{"text":"can succeed on a given input) you must order them from most specific to least specific. That is,","type":"text"},{"text":" ","type":"text"},{"text":"the first parser should succeed on the fewest number of inputs and the last parser should","type":"text"},{"text":" ","type":"text"},{"text":"succeed on the most number of inputs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of"},{"type":"text","text":" "},{"type":"text","text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they"},{"type":"text","text":" "},{"type":"text","text":"are quoted:"}]},{"type":"codeListing","code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}]},{"type":"paragraph","inlineContent":[{"text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only","type":"text"},{"text":" ","type":"text"},{"text":"if that fails we can parse a plain field that takes everything up until the next comma or","type":"text"},{"text":" ","type":"text"},{"text":"newline:","type":"text"}]},{"type":"codeListing","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then we can parse many fields to form an array of fields making up a line, and then parse many","type":"text"},{"text":" ","type":"text"},{"text":"lines to make up a full, doubly-nested array for the CSV:","type":"text"}]},{"type":"codeListing","code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Running this parser on the input shows that it properly isolates each field of the CSV, even"},{"type":"text","text":" "},{"type":"text","text":"fields that are quoted and contain a comma:"}]},{"type":"codeListing","code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" parser is a ","type":"text"},{"inlineContent":[{"text":"more","type":"text"}],"type":"emphasis"},{"text":" specific parser in that it will succeed on fewer inputs","type":"text"},{"text":" ","type":"text"},{"text":"than the ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parser does. For example:","type":"text"}]},{"type":"codeListing","code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whereas the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser will happily succeed on anything the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser will"},{"type":"text","text":" "},{"type":"text","text":"succeed on:"}]},{"type":"codeListing","code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For this reason the ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" parser must be listed first so that it can try its logic","type":"text"},{"text":" ","type":"text"},{"text":"first, which succeeds less frequently, before then trying the ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"succeeds more often.","type":"text"}]},{"text":"Backtracking","type":"heading","level":2,"anchor":"Backtracking"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" parser is the primary tool for introducing backtracking into your parsers,"},{"type":"text","text":" "},{"type":"text","text":"which means to undo the consumption of a parser when it fails. For more information, see the"},{"type":"text","text":" "},{"type":"text","text":"article "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},{"type":"text","text":"."}]}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"url":"\/documentation\/parsing\/skip","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","title":"Skip","type":"topic","abstract":[{"type":"text","text":"A parser that discards the output of another parser."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Skip"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}]},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"url":"\/documentation\/parsing\/end","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","title":"End","type":"topic","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"End"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"abstract":[],"type":"topic","title":"ParserPrinter Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"url":"\/documentation\/parsing\/fromsubstring","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","title":"FromSubstring","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/parse(_:)":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parse(_:)","type":"topic","title":"parse(_:)","url":"\/documentation\/parsing\/oneof\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"url":"\/documentation\/parsing\/float","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","title":"Float","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a floating-point number from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"url":"\/documentation\/parsing\/newline","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","title":"Newline","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Newline"}],"deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","kind":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","url":"\/documentation\/parsing\/backtracking","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOfBuilder":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOfBuilder","navigatorTitle":[{"kind":"identifier","text":"OneOfBuilder"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"type":"topic","url":"\/documentation\/parsing\/oneofbuilder","title":"OneOfBuilder","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOfBuilder"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"kind":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","url":"\/documentation\/parsing\/oneof","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"title":"OneOf","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"url":"\/documentation\/parsing\/prefixthrough","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","title":"PrefixThrough","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"role":"symbol","type":"topic","title":"Fail","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fail"}],"kind":"symbol","url":"\/documentation\/parsing\/fail","abstract":[{"text":"A parser that always fails, no matter the input.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Fail"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"url":"\/documentation\/parsing\/lazy","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","title":"Lazy","type":"topic","abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","type":"reference"},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"text":"create a parser for the given input.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Lazy","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Lazy","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Parsers","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":".","type":"text"}]},"title":"ParserPrinter","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"topic","url":"\/documentation\/parsing\/parserprinter","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"url":"\/documentation\/parsing\/fromunicodescalarview","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","title":"FromUnicodeScalarView","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}],"deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Rest","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","title":"Rest","kind":"symbol","navigatorTitle":[{"text":"Rest","kind":"identifier"}],"abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"url":"\/documentation\/parsing\/rest","type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"url":"\/documentation\/parsing\/fromutf8view","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","title":"FromUTF8View","type":"topic","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}],"deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"url":"\/documentation\/parsing\/always","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","title":"Always","type":"topic","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"role":"symbol","navigatorTitle":[{"text":"Always","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"url":"\/documentation\/parsing\/whitespace","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","title":"Whitespace","type":"topic","abstract":[{"type":"text","text":"A parser that consumes whitespace from the beginning of input."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"url":"\/documentation\/parsing\/lazy\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","title":"parse(_:)","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}]},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/init(_:)":{"title":"init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/init(_:)","type":"topic","url":"\/documentation\/parsing\/oneof\/init(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"navigatorTitle":[{"kind":"identifier","text":"Prefix"}],"type":"topic","url":"\/documentation\/parsing\/prefix","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Prefix"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","title":"Prefix"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"url":"\/documentation\/parsing\/string","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","title":"String","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/replaceError(with:)":{"title":"replaceError(with:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/replaceError(with:)","type":"topic","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/Parser-Implementations","role":"collectionGroup","title":"Parser Implementations","type":"topic","abstract":[],"url":"\/documentation\/parsing\/oneof\/parser-implementations","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"url":"\/documentation\/parsing\/peek","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","title":"Peek","type":"topic","abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Peek"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"}]},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"url":"\/documentation\/parsing\/first","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","title":"First","type":"topic","abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"First"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"First"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"navigatorTitle":[{"kind":"identifier","text":"Parse"}],"title":"Parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parse","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"url":"\/documentation\/parsing\/bool","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","title":"Bool","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"url":"\/documentation\/parsing\/uuid","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","title":"UUID","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a "},{"code":"UUID","type":"codeVoice"},{"type":"text","text":" value from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"title":"AnyParser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/anyparser","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"url":"\/documentation\/parsing\/startswith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","title":"StartsWith","type":"topic","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"role":"symbol","navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"url":"\/documentation\/parsing\/caseiterable","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","title":"CaseIterable","type":"topic","abstract":[{"type":"text","text":"A parser-printer that consumes a case-iterable, raw representable value from the beginning of a"},{"type":"text","text":" "},{"type":"text","text":"string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"url":"\/documentation\/parsing\/many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","title":"Many","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol","navigatorTitle":[{"text":"Many","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","type":"topic","kind":"symbol","title":"PrefixUpTo","navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"url":"\/documentation\/parsing\/prefixupto","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"url":"\/documentation\/parsing\/int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","title":"Int","type":"topic","abstract":[{"type":"text","text":"A parser that consumes an integer from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf/parsers":{"title":"parsers","kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parsers","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf\/parsers","type":"topic","url":"\/documentation\/parsing\/oneof\/parsers","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"url":"\/documentation\/parsing\/stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","title":"Stream","type":"topic","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Stream"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"url":"\/documentation\/parsing\/not","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","title":"Not","type":"topic","abstract":[{"type":"text","text":"A parser that succeeds if the given parser fails, and does not consume any input."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Not"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Not"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"url":"\/documentation\/parsing\/characterset","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","title":"CharacterSet","type":"topic","abstract":[{"type":"text","text":"A parser that consumes the characters contained in a "},{"code":"CharacterSet","type":"codeVoice"},{"type":"text","text":" from the beginning of a string."}],"role":"article","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","role":"symbol","navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if it fails.","type":"text"}],"url":"\/documentation\/parsing\/optionally","type":"topic","title":"Optionally"}}}