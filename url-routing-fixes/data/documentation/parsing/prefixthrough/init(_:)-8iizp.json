{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/init(_:)-8iizp"},"kind":"symbol","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"possibleMatch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":")"}],"platforms":["Linux"]}],"kind":"declarations"}],"metadata":{"symbolKind":"init","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Input.Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":")"}],"modules":[{"name":"Parsing"}],"role":"symbol","extendedModule":"Parsing","roleHeading":"Initializer","externalID":"s:7Parsing13PrefixThroughVAASQ7ElementRpzrlEyACyxGxcfc"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefixthrough\/init(_:)-8iizp"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"url":"\/documentation\/parsing\/prefixthrough","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","title":"PrefixThrough","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough/init(_:)-8iizp":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/init(_:)-8iizp","kind":"symbol","role":"symbol","type":"topic","title":"init(_:)","url":"\/documentation\/parsing\/prefixthrough\/init(_:)-8iizp","abstract":[],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"text":", and ","type":"text"},{"code":"Input.Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":")"}]}}}