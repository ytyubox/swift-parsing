{"metadata":{"modules":[{"name":"Parsing"}],"symbolKind":"module","roleHeading":"Framework","role":"collection","title":"Parsing","externalID":"Parsing"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing"]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"],"title":"Protocols"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"],"title":"Enumerations"}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Additional-Resources","text":"Additional Resources"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","isActive":true,"type":"reference"}]}]}]},{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"Parsing with this library is performed by listing out many small parsers that describe how to"},{"type":"text","text":" "},{"type":"text","text":"incrementally consume small bits from the beginning of an input string. For example, suppose you"},{"type":"text","text":" "},{"type":"text","text":"have a string that holds some user data that you want to parse into an array of "},{"code":"User","type":"codeVoice"},{"type":"text","text":"s:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"]},{"inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"]},{"inlineContent":[{"type":"text","text":"This says that to parse a user we:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parse and consume an integer from the beginning of the input"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then a comma"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"then everything up to the next comma"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"then another comma"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"and finally a boolean."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"And to parse an entire array of users we:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the "},{"code":"user","type":"codeVoice"},{"type":"text","text":" parser many times"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"between each invocation of ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" we run the separator parser to consume a newline","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"and once the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" and separator parsers have consumed all they can we run the terminator"},{"type":"text","text":" "},{"type":"text","text":"parser to verify there is no more input to consume."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits","type":"text"},{"text":" ","type":"text"},{"text":"an error that describes exactly what went wrong:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""]},{"inlineContent":[{"type":"text","text":"With a few small changes we can also turn this parser into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"}],"type":"paragraph"},{"inlineContent":[{"text":"That’s the basics of parsing a simple string format, but there are a lot more operators and tricks","type":"text"},{"text":" ","type":"text"},{"text":"to learn in order to performantly parse larger inputs.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"seeAlsoSections":[{"identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"abstract":[{"text":"The collection of videos from ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/www.pointfree.co"},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"title":"Related Documentation"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"title":"CountingRange","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"url":"\/documentation\/parsing\/countingrange","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"title":"Conditional","url":"\/documentation\/parsing\/conditional","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"role":"symbol","kind":"symbol","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Conditional"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","url":"\/documentation\/parsing\/design","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","role":"article","kind":"article","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}]},"https://www.pointfree.co/collections/parsing":{"title":"Point-Free Videos","url":"https:\/\/www.pointfree.co\/collections\/parsing","type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/parsing","titleInlineContent":[{"text":"Point-Free Videos","type":"text"}]},"https://github.com/pointfreeco/swift-parsing/discussions":{"title":"Discussions","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","titleInlineContent":[{"text":"Discussions","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Digits":{"url":"\/documentation\/parsing\/digits","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"}],"navigatorTitle":[{"text":"Digits","kind":"identifier"}],"title":"Digits","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Digits","type":"topic","kind":"symbol","abstract":[{"text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code","type":"text"},{"text":" ","type":"text"},{"text":"units.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"title":"ParserBuilder","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parserbuilder","role":"symbol"},"https://github.com/pointfreeco/swift-parsing":{"title":"GitHub Repo","url":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","titleInlineContent":[{"text":"GitHub Repo","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"abstract":[{"type":"text","text":"An entry to "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true},{"type":"text","text":" syntax that requires the builder to be a printer."}],"title":"ParsePrint","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParsePrint"}],"navigatorTitle":[{"kind":"identifier","text":"ParsePrint"}],"url":"\/documentation\/parsing\/parseprint","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error Messages","url":"\/documentation\/parsing\/errormessages","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","role":"article","kind":"article","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"type":"topic","title":"AnyConversion","abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"text":".","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","url":"\/documentation\/parsing\/anyconversion","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","kind":"article","abstract":[{"type":"text","text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when"},{"type":"text","text":" "},{"type":"text","text":"unnecessary."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","url":"\/documentation\/parsing\/backtracking","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","role":"symbol","url":"\/documentation\/parsing\/parserprinter","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","title":"ParserPrinter","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"title":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/parsers","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Consumed":{"type":"topic","url":"\/documentation\/parsing\/consumed","title":"Consumed","kind":"symbol","abstract":[{"type":"text","text":"A parser that returns the subsequence of input consumed by another parser."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Consumed","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Consumed","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Consumed"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" from "},{"code":"Input","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","title":"AnyParserPrinter","role":"symbol","url":"\/documentation\/parsing\/anyparserprinter","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParserPrinter","kind":"identifier"}],"navigatorTitle":[{"text":"AnyParserPrinter","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter"},"doc://co.pointfree.Parsing/documentation/Parsing":{"type":"topic","url":"\/documentation\/parsing","kind":"symbol","role":"collection","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/From":{"navigatorTitle":[{"kind":"identifier","text":"From"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/From","role":"symbol","type":"topic","title":"From","url":"\/documentation\/parsing\/from","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"From"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}],"url":"\/documentation\/parsing\/prependablecollection","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"title":"PrependableCollection","abstract":[{"text":"A collection that supports empty initialization and the ability to prepend a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements of elements to itself.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","role":"symbol","url":"\/documentation\/parsing\/conversions","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}],"type":"topic","title":"Conversions","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"type":"topic","abstract":[{"type":"text","text":"Declares a type that can transform an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value back into an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"title":"Conversion","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","url":"\/documentation\/parsing\/conversion","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"navigatorTitle":[{"text":"Conversion","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"role":"article","type":"topic","title":"String Abstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","kind":"article","url":"\/documentation\/parsing\/stringabstractions"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"title":"Getting Started","url":"\/documentation\/parsing\/gettingstarted","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","role":"article","kind":"article","abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol"}}}