{"variants":[{"paths":["\/documentation\/parsing\/peek"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/upstream"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/Parser-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","text":"Parser"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"It lets you “peek” to see what output the parser would parse."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, identifiers (variables, functions, etc.) in Swift allow the first character to be a","type":"text"},{"text":" ","type":"text"},{"text":"letter or underscore, but not a digit, but subsequent characters can be digits. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"E.g."}]},{"text":", ","type":"text"},{"code":"foo123","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is a valid identifier, but ","type":"text"},{"code":"123foo","type":"codeVoice"},{"text":" is not. We can create an identifier parser by using ","type":"text"},{"code":"Peek","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to first check if the input starts with a letter or underscore, and if it does, return the","type":"text"},{"text":" ","type":"text"},{"text":"remainder of the input up to the first character that is not a letter, a digit, or an","type":"text"},{"text":" ","type":"text"},{"text":"underscore.","type":"text"}],"type":"paragraph"},{"code":["let identifier = Parse {","  Skip {","    Peek { Prefix(1) { $0.isLetter || $0 == \"_\" } }","  }","  Prefix { $0.isNumber || $0.isLetter || $0 == \"_\" }","}"],"type":"codeListing","syntax":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":2},"abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"metadata":{"title":"Peek","externalID":"s:7Parsing4PeekV","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"role":"symbol","roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"Parsing"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"sections":[],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Peek/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/parse(_:)","title":"parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"url":"\/documentation\/parsing\/peek\/parse(_:)","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"Declares a type that can parse an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value into an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value."}],"url":"\/documentation\/parsing\/parser","title":"Parser","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/upstream":{"abstract":[],"title":"upstream","url":"\/documentation\/parsing\/peek\/upstream","type":"topic","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"upstream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Upstream"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/upstream","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"kind":"symbol","title":"Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/Parser-Implementations":{"role":"collectionGroup","abstract":[],"type":"topic","url":"\/documentation\/parsing\/peek\/parser-implementations","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/Parser-Implementations","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/init(_:)":{"url":"\/documentation\/parsing\/peek\/init(_:)","abstract":[{"text":"Construct a parser that runs the given parser, but does not consume any input.","type":"text"}],"title":"init(_:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/init(_:)","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"role":"symbol","abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"}],"url":"\/documentation\/parsing\/peek","title":"Peek","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Peek"}]}}}