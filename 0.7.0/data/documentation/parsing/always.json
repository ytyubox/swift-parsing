{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)-2spg2","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)-56hez","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)-fdjh"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/output"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/map(_:)-9q3t1","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/Parser-Implementations"],"generated":true}],"sections":[],"variants":[{"paths":["\/documentation\/parsing\/always"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While not very useful on its own, the "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" parser can be helpful when combined with other"},{"type":"text","text":" "},{"type":"text","text":"parsers or operators."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When its "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Void"},{"type":"text","text":", it can be used as a “no-op” parser of sorts and be plugged into"},{"type":"text","text":" "},{"type":"text","text":"other parser operations. For example, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many"},{"type":"text","text":" parser can be configured with separator and"},{"type":"text","text":" "},{"type":"text","text":"terminator parsers:"}]},{"type":"codeListing","syntax":"swift","code":["Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  End()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But also exposes initializers that omit these parsers when there is no separator or terminator"},{"type":"text","text":" "},{"type":"text","text":"to be parsed:"}]},{"type":"codeListing","syntax":"swift","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","}"]},{"type":"paragraph","inlineContent":[{"text":"To support this, ","type":"text"},{"type":"codeVoice","code":"Many"},{"text":" plugs ","type":"text"},{"type":"codeVoice","code":"Always<Input, Void>"},{"text":" into each omitted parser. As a simplified","type":"text"},{"text":" ","type":"text"},{"text":"example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Many<Element: Parser, Separator: Parser, Terminator: Parser>: Parser","where Separator.Input == Element.Input, Terminator.Input == Element.Input {","  ...","}","","extension Many where Separator == Always<Input, Void>, Terminator == Always<Input, Void> {","  init(@ParserBuilder element: () -> Element) {","    self.element = element()","    self.separator = Always(())","    self.terminator = Always(())","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means the previous example is equivalent to:"}]},{"type":"codeListing","syntax":"swift","code":["Many {","  Prefix { $0 != \"\\n\" }","  \"\\n\"","} separator: {","  Always(())","} terminator: {","  Always(())","}"]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"Always"},{"type":"text","text":" can be used as the last alternative of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf"},{"type":"text","text":" to specify a default"},{"type":"text","text":" "},{"type":"text","text":"output, the resulting parser will be throwing. Instead, prefer "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns a non-throwing parser."}],"type":"paragraph"}]}]}],"schemaVersion":{"minor":2,"patch":0,"major":0},"abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"metadata":{"navigatorTitle":[{"text":"Always","kind":"identifier"}],"roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6AlwaysV","role":"symbol","title":"Always","symbolKind":"struct"},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"Declares a type that can parse an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value into an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value."}],"url":"\/documentation\/parsing\/parser","title":"Parser","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/parse(_:)":{"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"title":"parse(_:)","kind":"symbol","url":"\/documentation\/parsing\/always\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/parse(_:)","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/init(_:)-fdjh":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"abstract":[],"url":"\/documentation\/parsing\/always\/init(_:)-fdjh","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"init(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)-fdjh","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/output":{"type":"topic","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"output"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Output"}],"abstract":[],"url":"\/documentation\/parsing\/always\/output","role":"symbol","title":"output","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/output","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/map(_:)-9q3t1":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Always","preciseIdentifier":"s:7Parsing6AlwaysV"},{"kind":"text","text":"<"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[],"url":"\/documentation\/parsing\/always\/map(_:)-9q3t1","role":"symbol","title":"map(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/map(_:)-9q3t1","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","title":"OneOf","url":"\/documentation\/parsing\/oneof"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","abstract":[],"kind":"symbol","title":"Parsing","role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Many","kind":"identifier"}],"title":"Many","url":"\/documentation\/parsing\/many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/init(_:)-56hez":{"abstract":[],"title":"init(_:)","url":"\/documentation\/parsing\/always\/init(_:)-56hez","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)-56hez","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"title":"Always","url":"\/documentation\/parsing\/always","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"navigatorTitle":[{"kind":"identifier","text":"Always"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/Parser-Implementations":{"abstract":[],"kind":"article","type":"topic","title":"Parser Implementations","url":"\/documentation\/parsing\/always\/parser-implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/replaceError(with:)":{"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"title":"replaceError(with:)","url":"\/documentation\/parsing\/parser\/replaceerror(with:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/replaceError(with:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/init(_:)-2spg2":{"url":"\/documentation\/parsing\/always\/init(_:)-2spg2","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)-2spg2","role":"symbol","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Substring","type":"codeVoice"},{"text":".","type":"text"}]}}}}