{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefix\/init(_:while:)-99fro"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","metadata":{"externalID":"s:7Parsing6PrefixVAASsRszrlE_5whileACySsGqd___SbSJcSgtcAA13CountingRangeRd__lufc","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:Ss7Elementa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")?)","kind":"text"}],"role":"symbol","roleHeading":"Initializer","symbolKind":"init","modules":[{"name":"Parsing"}],"extendedModule":"Parsing","title":"init(_:while:)","conformance":{"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix\/init(_:while:)-99fro","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":" "},{"kind":"internalParam","text":"predicate"},{"text":": ((","kind":"text"},{"preciseIdentifier":"s:Ss","text":"Substring","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Ss7Elementa","text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")? = nil) ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Parsing13CountingRangeP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","text":"CountingRange","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"title":"Prefix","url":"\/documentation\/parsing\/prefix","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"text":"Prefix","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"title":"CountingRange","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"abstract":[],"url":"\/documentation\/parsing\/countingrange","type":"topic","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"kind":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"type":"topic","role":"symbol","title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix/init(_:while:)-99fro":{"abstract":[],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix\/init(_:while:)-99fro","title":"init(_:while:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Ss7Elementa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")?)"}],"url":"\/documentation\/parsing\/prefix\/init(_:while:)-99fro"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing","role":"collection","type":"topic","url":"\/documentation\/parsing","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"kind":"symbol"}}}