{"sections":[],"kind":"article","seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Adding-Parsing-as-a-dependency","text":"Adding Parsing as a dependency","type":"heading"},{"inlineContent":[{"text":"To use the Parsing library in a SwiftPM project, add it to the dependencies of your Package.swift","type":"text"},{"text":" ","type":"text"},{"text":"and specify the ","type":"text"},{"code":"Parsing","type":"codeVoice"},{"text":" product in any targets that need access to the library:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let package = Package(","  dependencies: [","    .package(url: \"https:\/\/github.com\/pointfreeco\/swift-parsing\", from: \"0.7.0\"),","  ],","  targets: [","    .target(","      name: \"<target-name>\",","      dependencies: [.product(name: \"Parsing\", package: \"swift-parsing\")]","    )","  ]",")"],"type":"codeListing"},{"anchor":"Your-first-parser","text":"Your first parser","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Suppose you have a string that holds some user data that you want to parse into an array of ","type":"text"},{"code":"User","type":"codeVoice"},{"text":"s:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let input = \"\"\"","  1,Blob,true","  2,Blob Jr.,false","  3,Blob Sr.,true","  \"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"]},{"type":"paragraph","inlineContent":[{"text":"A naive approach to this would be a nested use of ","type":"text"},{"code":".split(separator:)","type":"codeVoice"},{"text":", and then a little bit of","type":"text"},{"text":" ","type":"text"},{"text":"extra work to convert strings into integers and booleans:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let users = input","  .split(separator: \"\\n\")","  .compactMap { row -> User? in","    let fields = row.split(separator: \",\")","    guard","      fields.count == 3,","      let id = Int(fields[0]),","      let isAdmin = Bool(String(fields[2]))","    else { return nil }","","    return User(id: id, name: String(fields[1]), isAdmin: isAdmin)","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not only is this code a little messy, but it is also inefficient since we are allocating arrays for"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".split"},{"type":"text","text":" and then just immediately throwing away those values."}]},{"type":"paragraph","inlineContent":[{"text":"It would be more straightforward and efficient to instead describe how to consume bits from the","type":"text"},{"text":" ","type":"text"},{"text":"beginning of the input and convert that into users. This is what this parser library excels at 😄.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We can start by describing what it means to parse a single row, first by parsing an integer off the","type":"text"},{"text":" ","type":"text"},{"text":"front of the string, and then parsing a comma. We can do this by using the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","isActive":true,"type":"reference"},{"text":" type, which acts","type":"text"},{"text":" ","type":"text"},{"text":"as an entry point into describing a list of parsers that you want to run one after the other to","type":"text"},{"text":" ","type":"text"},{"text":"consume from an input:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse {","  Int.parser()","  \",\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Already this can consume the leading integer and comma from the beginning of the input:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Use a mutable substring to verify what is consumed","var input = input[...]","","try user.parse(&input)  \/\/ 1","input                   \/\/ \"Blob,true\\n2,Blob Jr.,false\\n3,Blob Sr.,true\""]},{"type":"paragraph","inlineContent":[{"text":"Next we want to take everything up until the next comma for the user’s name, and then consume the","type":"text"},{"text":" ","type":"text"},{"text":"comma:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }","  \",\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we want to take the boolean at the end of the row for the user’s admin status:"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }","  \",\"","  Bool.parser()","}"]},{"type":"paragraph","inlineContent":[{"text":"Currently this will parse a tuple ","type":"text"},{"code":"(Int, Substring, Bool)","type":"codeVoice"},{"text":" from the input, and we can ","type":"text"},{"code":".map","type":"codeVoice"},{"text":" on","type":"text"},{"text":" ","type":"text"},{"text":"that to turn it into a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }","  \",\"","  Bool.parser()","}",".map { User(id: $0, name: String($1), isAdmin: $2) }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make the data we are parsing to more prominent, we can instead pass the transform closure as the"},{"type":"text","text":" "},{"type":"text","text":"first argument to "},{"type":"codeVoice","code":"Parse"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse {","  User(id: $0, name: String($1), isAdmin: $2)","} with: {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }","  \",\"","  Bool.parser()","}"]},{"type":"paragraph","inlineContent":[{"text":"Or we can pass the ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" initializer to ","type":"text"},{"type":"codeVoice","code":"Parse"},{"text":" in a point-free style by first transforming the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Prefix"},{"text":" parser’s output from a ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":" to a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse(User.init(id:name:isAdmin:)) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is enough to parse a single user from the input string, leaving behind a newline and the final"},{"type":"text","text":" "},{"type":"text","text":"two users:"}]},{"type":"codeListing","syntax":"swift","code":["try user.parse(&input) \/\/ User(id: 1, name: \"Blob\", isAdmin: true)","input \/\/ \"\\n2,Blob Jr.,false\\n3,Blob Sr.,true\""]},{"type":"paragraph","inlineContent":[{"text":"To parse multiple users from the input we can use the ","type":"text"},{"code":"Many","type":"codeVoice"},{"text":" parser to run the user parser many","type":"text"},{"text":" ","type":"text"},{"text":"times:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let users = Many {","  user","} separator: {","  \"\\n\"","}","","try users.parse(&input) \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]","input \/\/ \"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now this parser can process an entire document of users, and the code is simpler and more"},{"type":"text","text":" "},{"type":"text","text":"straightforward than the version that uses "},{"type":"codeVoice","code":".split"},{"type":"text","text":" and "},{"type":"codeVoice","code":".compactMap"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Even better, it’s more performant. We’ve written ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/blob\/main\/Sources\/swift-parsing-benchmark\/ReadmeExample.swift"},{"text":" for these two","type":"text"},{"text":" ","type":"text"},{"text":"styles of parsing, and the ","type":"text"},{"code":".split","type":"codeVoice"},{"text":"-style of parsing is more than twice as slow:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["name                             time        std        iterations","------------------------------------------------------------------","README Example.Parser: Substring 3426.000 ns ±  63.40 %     385395","README Example.Ad hoc            7631.000 ns ±  47.01 %     169332"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if you are willing write your parsers against "},{"type":"codeVoice","code":"UTF8View"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":", you can"},{"type":"text","text":" "},{"type":"text","text":"eke out even more performance, more than doubling the speed:"}]},{"type":"codeListing","syntax":null,"code":["name                             time        std        iterations","------------------------------------------------------------------","README Example.Parser: Substring 3693.000 ns ±  81.76 %     349763","README Example.Parser: UTF8      1272.000 ns ± 128.16 %     999150","README Example.Ad hoc            8504.000 ns ±  59.59 %     151417"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the article "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","isActive":true},{"type":"text","text":" for more info on how to write parsers against different"},{"type":"text","text":" "},{"type":"text","text":"string abstraction levels."}]},{"type":"paragraph","inlineContent":[{"text":"We can also compare these times to a tool that Apple’s Foundation gives us: ","type":"text"},{"code":"Scanner","type":"codeVoice"},{"text":". It’s a type","type":"text"},{"text":" ","type":"text"},{"text":"that allows you to consume from the beginning of strings in order to produce values, and provides","type":"text"},{"text":" ","type":"text"},{"text":"a nicer API than using ","type":"text"},{"code":".split","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var users: [User] = []","while scanner.currentIndex != input.endIndex {","  guard","    let id = scanner.scanInt(),","    let _ = scanner.scanString(\",\"),","    let name = scanner.scanUpToString(\",\"),","    let _ = scanner.scanString(\",\"),","    let isAdmin = scanner.scanBool()","  else { break }","","  users.append(User(id: id, name: name, isAdmin: isAdmin))","  _ = scanner.scanString(\"\\n\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the "},{"type":"codeVoice","code":"Scanner"},{"type":"text","text":" style of parsing is more than 5 times as slow as the substring parser written"},{"type":"text","text":" "},{"type":"text","text":"written above, and more than 15 times slower than the UTF-8 parser:"}]},{"type":"codeListing","syntax":null,"code":["name                             time         std        iterations","-------------------------------------------------------------------","README Example.Parser: Substring  3481.000 ns ±  65.04 %     376525","README Example.Parser: UTF8       1207.000 ns ± 110.96 %    1000000","README Example.Ad hoc             8029.000 ns ±  44.44 %     163719","README Example.Scanner           19786.000 ns ±  35.26 %      62125"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not only are parsers built with the library more succinct and many times more performant than ad hoc"},{"type":"text","text":" "},{"type":"text","text":"parsers, but they can also be easier to evolve to accommodate more features. For example, right now"},{"type":"text","text":" "},{"type":"text","text":"our parser does not work correctly when the user’s name contains a comma, such as “Blob, Esq.”:"}]},{"type":"codeListing","syntax":"swift","code":["try user.parse(\"1,Blob, Esq.,true\")","","\/\/ error: unexpected input","\/\/  --> input:1:8","\/\/ 1 | 1,Blob, Esq.,true","\/\/   |        ^ expected \"true\" or \"false\""]},{"type":"paragraph","inlineContent":[{"text":"The problem is that we are using the comma as a reserved identifier for delineating between fields,","type":"text"},{"text":" ","type":"text"},{"text":"and so a field cannot contain a comma. We can enhance the CSV format to allow for quoting fields","type":"text"},{"text":" ","type":"text"},{"text":"so that they can contain quotes:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["1,\"Blob, Esq.\",true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To parse quoted fields we can first try parsing a quote, then everything up to the next quote, and"},{"type":"text","text":" "},{"type":"text","text":"then the trailing quote:"}]},{"type":"codeListing","syntax":"swift","code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}"]},{"type":"paragraph","inlineContent":[{"text":"And then to parse a field, in general, we can first try parsing a quoted field, and if that fails we","type":"text"},{"text":" ","type":"text"},{"text":"will just take everything until the next comma. We can do this using the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference","isActive":true},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"allows us to run multiple parsers on the same input, and it will take the first that succeeds:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let field = OneOf {","  quotedField","  Prefix { $0 != \",\" }","}",".map(String.init)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can use this parser in the "},{"code":"user","type":"codeVoice"},{"type":"text","text":" parser, and now it properly handles quoted and non-quoted"},{"type":"text","text":" "},{"type":"text","text":"fields:"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  field","  \",\"","  Bool.parser()","}","","try user.parse(\"1,\\\"Blob, Esq.\\\",true\") \/\/ User(id: 1, name: \"Blob, Esq.\", admin: true)"]},{"type":"paragraph","inlineContent":[{"text":"It was quite straightforward to improve the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" parser to handle quoted fields. Doing the same","type":"text"},{"text":" ","type":"text"},{"text":"with our ad hoc ","type":"text"},{"code":"split","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"compactMap","type":"codeVoice"},{"text":" parser, and even the ","type":"text"},{"code":"Scanner","type":"codeVoice"},{"text":"-based parser, would be a lot","type":"text"},{"text":" ","type":"text"},{"text":"more difficult.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"That’s the basics of parsing a simple string format, but there’s a lot more operators and tricks to","type":"text"},{"text":" ","type":"text"},{"text":"learn in order to performantly parse larger inputs. View the ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/tree\/main\/Sources\/swift-parsing-benchmark","isActive":true},{"text":" for examples","type":"text"},{"text":" ","type":"text"},{"text":"of real-life parsing scenarios.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/parsing\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"metadata":{"modules":[{"name":"Parsing"}],"roleHeading":"Article","role":"article","title":"Getting Started"},"schemaVersion":{"minor":2,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","url":"\/documentation\/parsing\/backtracking","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},"https://github.com/pointfreeco/swift-parsing/blob/main/Sources/swift-parsing-benchmark/ReadmeExample.swift":{"title":"benchmarks","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/blob\/main\/Sources\/swift-parsing-benchmark\/ReadmeExample.swift","type":"link","titleInlineContent":[{"text":"benchmarks","type":"text"}],"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/blob\/main\/Sources\/swift-parsing-benchmark\/ReadmeExample.swift"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"title":"Parse","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"navigatorTitle":[{"text":"Parse","kind":"identifier"}],"url":"\/documentation\/parsing\/parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"url":"\/documentation\/parsing\/stringabstractions","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"title":"String Abstractions","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error messages","url":"\/documentation\/parsing\/errormessages","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"},"https://github.com/pointfreeco/swift-parsing/tree/main/Sources/swift-parsing-benchmark":{"title":"benchmarks","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/tree\/main\/Sources\/swift-parsing-benchmark","type":"link","titleInlineContent":[{"text":"benchmarks","type":"text"}],"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/tree\/main\/Sources\/swift-parsing-benchmark"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","url":"\/documentation\/parsing\/design","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/oneof","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"title":"OneOf","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"}}}