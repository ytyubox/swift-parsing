{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45k0x","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45yib","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-93ai6","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-98ny1"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/Parser-Implementations"],"title":"Default Implementations","generated":true}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Bytes","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Bytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:s4UTF8a","text":"UTF8","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","text":"CodeUnit","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This parser only consumes a line feed (","type":"text"},{"type":"codeVoice","code":"\"\\n\""},{"text":") or a carriage returns with line feed","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"\"\\r\\n\""},{"text":"). If you need richer support that covers all unicode newline characters, use a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","type":"reference"},{"text":" parser that operates on the ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":" level with a predicate that consumes a","type":"text"},{"text":" ","type":"text"},{"text":"single newline:","type":"text"}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It will consume both line feeds ("},{"type":"codeVoice","code":"\"\\n\""},{"type":"text","text":") and carriage returns with line feeds ("},{"type":"codeVoice","code":"\"\\r\\n\""},{"type":"text","text":")."}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"},"metadata":{"symbolKind":"struct","modules":[{"name":"Parsing"}],"roleHeading":"Structure","title":"Newline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}],"navigatorTitle":[{"text":"Newline","kind":"identifier"}],"externalID":"s:7Parsing7NewlineV","role":"symbol"},"schemaVersion":{"major":0,"patch":0,"minor":2},"variants":[{"paths":["\/documentation\/parsing\/newline"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"],"title":"Common parsers","generated":true}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"A parser that consumes a single newline from the beginning of the input."}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}],"role":"symbol","url":"\/documentation\/parsing\/fromunicodescalarview","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","type":"topic","abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring.UnicodeScalarView"},{"type":"text","text":" into a parser on another"},{"type":"text","text":" "},{"type":"text","text":"view."}],"title":"FromUnicodeScalarView"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"kind":"symbol","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","title":"Peek","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"url":"\/documentation\/parsing\/peek","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"navigatorTitle":[{"kind":"identifier","text":"PrefixUpTo"}],"role":"symbol","url":"\/documentation\/parsing\/prefixupto","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixUpTo"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"title":"PrefixUpTo"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"role":"article","url":"\/documentation\/parsing\/int","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","type":"topic","abstract":[{"type":"text","text":"A parser that consumes an integer from the beginning of a string."}],"title":"Int"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"navigatorTitle":[{"kind":"identifier","text":"Lazy"}],"role":"symbol","url":"\/documentation\/parsing\/lazy","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Lazy"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","type":"topic","abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","isActive":true},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"type":"text","text":"create a parser for the given input."}],"title":"Lazy"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-45yib":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":"."}]},"title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45yib","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-45yib","type":"topic","kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"navigatorTitle":[{"kind":"identifier","text":"Rest"}],"role":"symbol","url":"\/documentation\/parsing\/rest","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Rest"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","type":"topic","abstract":[{"type":"text","text":"A parser that consumes everything to the end of the collection and returns this subsequence as"},{"type":"text","text":" "},{"type":"text","text":"its output."}],"title":"Rest"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"kind":"symbol","navigatorTitle":[{"text":"Prefix","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","title":"Prefix","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}],"url":"\/documentation\/parsing\/prefix","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/parse(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"kind":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/parse(_:)","url":"\/documentation\/parsing\/newline\/parse(_:)","type":"topic","title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"role":"symbol","url":"\/documentation\/parsing\/fromsubstring","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","type":"topic","abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" into a parser on another view."}],"title":"FromSubstring"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"role":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"role":"article","url":"\/documentation\/parsing\/uuid","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" value from the beginning of a string."}],"title":"UUID"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"role":"symbol","title":"AnyParser","kind":"symbol","abstract":[{"text":"A type-erased parser of ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","url":"\/documentation\/parsing\/anyparser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"navigatorTitle":[{"kind":"identifier","text":"Newline"}],"role":"symbol","url":"\/documentation\/parsing\/newline","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a single newline from the beginning of the input."}],"title":"Newline"},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"navigatorTitle":[{"kind":"identifier","text":"First"}],"role":"symbol","url":"\/documentation\/parsing\/first","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"First"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","type":"topic","abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"title":"First"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"navigatorTitle":[{"text":"Not","kind":"identifier"}],"abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"url":"\/documentation\/parsing\/not","title":"Not","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"role":"symbol","url":"\/documentation\/parsing\/whitespace","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","type":"topic","abstract":[{"type":"text","text":"A parser that consumes all ASCII whitespace from the beginning of the input."}],"title":"Whitespace"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-98ny1":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bytes"},{"text":" is ","type":"text"},{"code":"Substring.UTF8View","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-98ny1","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-98ny1","type":"topic","kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"navigatorTitle":[{"kind":"identifier","text":"Many"}],"role":"symbol","url":"\/documentation\/parsing\/many","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"title":"Many"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"role":"symbol","url":"\/documentation\/parsing\/prefixthrough","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"title":"PrefixThrough"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"role":"article","url":"\/documentation\/parsing\/string","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"title":"String"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"role":"article","url":"\/documentation\/parsing\/float","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a floating-point number from the beginning of a string."}],"title":"Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"navigatorTitle":[{"kind":"identifier","text":"Stream"}],"role":"symbol","url":"\/documentation\/parsing\/stream","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","type":"topic","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"title":"Stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}],"role":"symbol","url":"\/documentation\/parsing\/fromutf8view","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","type":"topic","abstract":[],"title":"FromUTF8View"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"role":"symbol","url":"\/documentation\/parsing\/startswith","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","type":"topic","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"title":"StartsWith"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"navigatorTitle":[{"kind":"identifier","text":"Always"}],"role":"symbol","url":"\/documentation\/parsing\/always","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","type":"topic","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"title":"Always"},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"role":"article","url":"\/documentation\/parsing\/characterset","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","type":"topic","abstract":[{"type":"text","text":"A parser that consumes the characters contained in a "},{"type":"codeVoice","code":"CharacterSet"},{"type":"text","text":" from the beginning of a string."}],"title":"CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-93ai6":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":"."}]},"title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-93ai6","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-93ai6","type":"topic","kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/Parser-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/Parser-Implementations","title":"Parser Implementations","url":"\/documentation\/parsing\/newline\/parser-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"navigatorTitle":[{"kind":"identifier","text":"End"}],"role":"symbol","url":"\/documentation\/parsing\/end","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","type":"topic","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"title":"End"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"title":"Parse","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"navigatorTitle":[{"text":"Parse","kind":"identifier"}],"url":"\/documentation\/parsing\/parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"navigatorTitle":[{"kind":"identifier","text":"Optionally"}],"role":"symbol","url":"\/documentation\/parsing\/optionally","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"topic","abstract":[{"type":"text","text":"A parser that runs the given parser and succeeds with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if it fails."}],"title":"Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/oneof","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"title":"OneOf","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"role":"article","url":"\/documentation\/parsing\/bool","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}],"title":"Bool"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"navigatorTitle":[{"kind":"identifier","text":"Skip"}],"role":"symbol","url":"\/documentation\/parsing\/skip","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","type":"topic","abstract":[{"type":"text","text":"A parser that discards the output of another parser."}],"title":"Skip"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"navigatorTitle":[{"kind":"identifier","text":"Fail"}],"role":"symbol","url":"\/documentation\/parsing\/fail","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fail"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","type":"topic","abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"title":"Fail"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-45k0x":{"conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Input.SubSequence","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Input.Element","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-45k0x","role":"symbol","url":"\/documentation\/parsing\/newline\/init()-45k0x","type":"topic","kind":"symbol","abstract":[]}}}