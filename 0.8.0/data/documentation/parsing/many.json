{"abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"text":"of the outputs.","type":"text"}],"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/many"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":2},"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}],"navigatorTitle":[{"text":"Many","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","externalID":"s:7Parsing4ManyV","title":"Many","modules":[{"name":"Parsing"}],"role":"symbol"},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Separator","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Terminator","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Terminator","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Terminator","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"For example, given a comma-separated string of numbers, one could parse out an array of","type":"text"},{"text":" ","type":"text"},{"text":"integers:","type":"text"}]},{"type":"codeListing","code":["let intsParser = Many {","  Int.parser()","} separator: {","  \",\"","}","","var input = \"1,2,3\"[...]","try intsParser.parse(&input)  \/\/ [1, 2, 3]","input                         \/\/ \"\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In addition to an element and separator parser, a “terminator” parser that is run after the element","type":"text"},{"text":" ","type":"text"},{"text":"parser has run as many times as possible. This can be useful for proving that the ","type":"text"},{"code":"Many","type":"codeVoice"},{"text":" parser has","type":"text"},{"text":" ","type":"text"},{"text":"consumed everything you expect:","type":"text"}]},{"type":"codeListing","code":["let intsParser = Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  \"---\"","}","","var input = \"1,2,3---\"[...]","try intsParser.parse(&input)  \/\/ [1, 2, 3]","input                         \/\/ \"\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The outputs of the element parser do not need to be accumulated in an array. More generally one can","type":"text"},{"text":" ","type":"text"},{"text":"specify a closure that customizes how outputs are accumulated, much like ","type":"text"},{"code":"Sequence.reduce(into:_)","type":"codeVoice"},{"text":". We","type":"text"},{"text":" ","type":"text"},{"text":"could, for example, sum the numbers as we parse them instead of accumulating each value in an array:","type":"text"}]},{"type":"codeListing","code":["let sumParser = Many(into: 0, +=) {","  Int.parser()","} separator: {","  \",\"","}","","var input = \"1,2,3\"[...]","try sumParser.parse(&input)  \/\/ 6","input                        \/\/ \"\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser fails if the terminator parser fails. For example, if we required our comma-separated"},{"type":"text","text":" "},{"type":"text","text":"integer parser to be terminated by "},{"code":"\"---\"","type":"codeVoice"},{"type":"text","text":", but we parsed a list that contained a non-integer we would"},{"type":"text","text":" "},{"type":"text","text":"get an error:"}]},{"type":"codeListing","code":["let intsParser = Many {","  Int.parser()","} separator: {","  \",\"","} terminator: {","  \"---\"","}","var input = \"1,2,Hello---\"[...]","try intsParser.parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:5","\/\/ 1 | 1,2,Hello---","\/\/   |     ^ expected integer"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:separator:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:separator:terminator:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:terminator:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:separator:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:separator:terminator:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:terminator:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/element","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/initialResult","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/maximum","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/minimum","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/separator","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/terminator","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/updateAccumulatingResult"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/Parser-Implementations"],"generated":true,"title":"Default Implementations"}],"seeAlsoSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"],"generated":true,"title":"Common parsers"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"role":"symbol","url":"\/documentation\/parsing\/fromsubstring","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","type":"topic","abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" into a parser on another view."}],"title":"FromSubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"navigatorTitle":[{"kind":"identifier","text":"Fail"}],"role":"symbol","url":"\/documentation\/parsing\/fail","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Fail"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","type":"topic","abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"title":"Fail"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"role":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"navigatorTitle":[{"kind":"identifier","text":"Stream"}],"role":"symbol","url":"\/documentation\/parsing\/stream","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","type":"topic","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"title":"Stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"navigatorTitle":[{"kind":"identifier","text":"Skip"}],"role":"symbol","url":"\/documentation\/parsing\/skip","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","type":"topic","abstract":[{"type":"text","text":"A parser that discards the output of another parser."}],"title":"Skip"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"navigatorTitle":[{"kind":"identifier","text":"Many"}],"role":"symbol","url":"\/documentation\/parsing\/many","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"title":"Many"},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"role":"article","url":"\/documentation\/parsing\/characterset","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","type":"topic","abstract":[{"type":"text","text":"A parser that consumes the characters contained in a "},{"type":"codeVoice","code":"CharacterSet"},{"type":"text","text":" from the beginning of a string."}],"title":"CharacterSet"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(into:atLeast:atMost:_:element:separator:terminator:)":{"type":"topic","title":"init(into:atLeast:atMost:_:element:separator:terminator:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:separator:terminator:)","abstract":[{"type":"text","text":"Initializes a parser that attempts to run the given parser at least and at most the given"},{"type":"text","text":" "},{"type":"text","text":"number of times, accumulating the outputs into a result with a given closure."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"terminator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Terminator","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:separator:terminator:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(atLeast:atMost:element:terminator:)":{"url":"\/documentation\/parsing\/many\/init(atleast:atmost:element:terminator:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"atMost"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"terminator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Terminator"},{"kind":"text","text":")"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"[Element.Output]"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Separator"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Always<Element.Input, Void>"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Terminator"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Element.Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Terminator.Input"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:terminator:)","kind":"symbol","title":"init(atLeast:atMost:element:terminator:)"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}],"role":"symbol","url":"\/documentation\/parsing\/fromunicodescalarview","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","type":"topic","abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring.UnicodeScalarView"},{"type":"text","text":" into a parser on another"},{"type":"text","text":" "},{"type":"text","text":"view."}],"title":"FromUnicodeScalarView"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/element":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/element","url":"\/documentation\/parsing\/many\/element","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"element"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Element"}],"abstract":[],"title":"element"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"navigatorTitle":[{"kind":"identifier","text":"Optionally"}],"role":"symbol","url":"\/documentation\/parsing\/optionally","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","type":"topic","abstract":[{"type":"text","text":"A parser that runs the given parser and succeeds with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if it fails."}],"title":"Optionally"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"kind":"symbol","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","title":"Peek","abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}],"url":"\/documentation\/parsing\/peek","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/updateAccumulatingResult":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/updateAccumulatingResult","url":"\/documentation\/parsing\/many\/updateaccumulatingresult","abstract":[],"title":"updateAccumulatingResult","type":"topic","kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"updateAccumulatingResult"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"navigatorTitle":[{"kind":"identifier","text":"Always"}],"role":"symbol","url":"\/documentation\/parsing\/always","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","type":"topic","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"title":"Always"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"role":"symbol","url":"\/documentation\/parsing\/whitespace","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","type":"topic","abstract":[{"type":"text","text":"A parser that consumes all ASCII whitespace from the beginning of the input."}],"title":"Whitespace"},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"navigatorTitle":[{"text":"Not","kind":"identifier"}],"abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"url":"\/documentation\/parsing\/not","title":"Not","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"role":"article","url":"\/documentation\/parsing\/bool","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a Boolean value from the beginning of a string."}],"title":"Bool"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}],"role":"symbol","url":"\/documentation\/parsing\/fromutf8view","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUTF8View"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","type":"topic","abstract":[],"title":"FromUTF8View"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"role":"symbol","url":"\/documentation\/parsing\/prefixthrough","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"title":"PrefixThrough"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(into:atLeast:atMost:_:element:separator:)":{"type":"topic","title":"init(into:atLeast:atMost:_:element:separator:)","abstract":[],"kind":"symbol","url":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:separator:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Separator"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Terminator"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Always<Element.Input, Void>"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Element.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Separator.Input"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:separator:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/Parser-Implementations":{"type":"topic","abstract":[],"kind":"article","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/Parser-Implementations","url":"\/documentation\/parsing\/many\/parser-implementations","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/initialResult":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"initialResult"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"}],"abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/initialResult","type":"topic","kind":"symbol","url":"\/documentation\/parsing\/many\/initialresult","title":"initialResult"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"navigatorTitle":[{"kind":"identifier","text":"Rest"}],"role":"symbol","url":"\/documentation\/parsing\/rest","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Rest"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","type":"topic","abstract":[{"type":"text","text":"A parser that consumes everything to the end of the collection and returns this subsequence as"},{"type":"text","text":" "},{"type":"text","text":"its output."}],"title":"Rest"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"role":"article","url":"\/documentation\/parsing\/string","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"title":"String"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/maximum":{"role":"symbol","title":"maximum","url":"\/documentation\/parsing\/many\/maximum","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/maximum","abstract":[],"type":"topic","kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"maximum","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}],"title":"Parse","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers to accumulate their outputs."}],"navigatorTitle":[{"text":"Parse","kind":"identifier"}],"url":"\/documentation\/parsing\/parse","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(into:atLeast:atMost:_:element:terminator:)":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", "},{"code":"Separator","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"type":"text","text":", "},{"code":"Terminator","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Element.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Terminator.Input","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:terminator:)","type":"topic","title":"init(into:atLeast:atMost:_:element:terminator:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"terminator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Terminator","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:terminator:)"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"navigatorTitle":[{"kind":"identifier","text":"StartsWith"}],"role":"symbol","url":"\/documentation\/parsing\/startswith","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","type":"topic","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"title":"StartsWith"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/minimum":{"url":"\/documentation\/parsing\/many\/minimum","title":"minimum","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/minimum","role":"symbol","kind":"symbol","abstract":[],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"minimum","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"navigatorTitle":[{"kind":"identifier","text":"End"}],"role":"symbol","url":"\/documentation\/parsing\/end","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","type":"topic","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"title":"End"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(atLeast:atMost:element:)":{"url":"\/documentation\/parsing\/many\/init(atleast:atmost:element:)","kind":"symbol","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" is "},{"type":"codeVoice","code":"[Element.Output]"},{"type":"text","text":", "},{"type":"codeVoice","code":"Separator"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Always<Element.Input, Void>"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Terminator"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Always<Element.Input, Void>"},{"type":"text","text":"."}]},"abstract":[{"text":"Initializes a parser that attempts to run the given parser at least and at most the given","type":"text"},{"text":" ","type":"text"},{"text":"number of times, accumulating the outputs in an array.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:)","title":"init(atLeast:atMost:element:)","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"kind":"symbol","navigatorTitle":[{"text":"Prefix","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","title":"Prefix","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}],"url":"\/documentation\/parsing\/prefix","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/oneof","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"title":"OneOf","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(atLeast:atMost:element:separator:)":{"title":"init(atLeast:atMost:element:separator:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Separator"},{"kind":"text","text":")"}],"kind":"symbol","url":"\/documentation\/parsing\/many\/init(atleast:atmost:element:separator:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:separator:)","abstract":[],"type":"topic","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"[Element.Output]","type":"codeVoice"},{"type":"text","text":", "},{"code":"Separator","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":", "},{"code":"Terminator","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Always<Element.Input, Void>","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Element.Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Separator.Input","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"navigatorTitle":[{"kind":"identifier","text":"PrefixUpTo"}],"role":"symbol","url":"\/documentation\/parsing\/prefixupto","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixUpTo"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"title":"PrefixUpTo"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(into:atLeast:atMost:_:element:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"atLeast","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"atMost","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(into:atLeast:atMost:_:element:)","title":"init(into:atLeast:atMost:_:element:)","url":"\/documentation\/parsing\/many\/init(into:atleast:atmost:_:element:)","abstract":[{"text":"Initializes a parser that attempts to run the given parser at least and at most the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"number of times, accumulating the outputs into a result with a given closure."}],"role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Separator"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Always<Element.Input, Void>"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Terminator"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Always<Element.Input, Void>"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"navigatorTitle":[{"kind":"identifier","text":"Newline"}],"role":"symbol","url":"\/documentation\/parsing\/newline","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Newline"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a single newline from the beginning of the input."}],"title":"Newline"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"role":"article","url":"\/documentation\/parsing\/float","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a floating-point number from the beginning of a string."}],"title":"Float"},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"navigatorTitle":[{"kind":"identifier","text":"First"}],"role":"symbol","url":"\/documentation\/parsing\/first","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"First"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","type":"topic","abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"title":"First"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"role":"article","url":"\/documentation\/parsing\/int","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","type":"topic","abstract":[{"type":"text","text":"A parser that consumes an integer from the beginning of a string."}],"title":"Int"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"role":"symbol","title":"AnyParser","kind":"symbol","abstract":[{"text":"A type-erased parser of ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","url":"\/documentation\/parsing\/anyparser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"navigatorTitle":[{"kind":"identifier","text":"Lazy"}],"role":"symbol","url":"\/documentation\/parsing\/lazy","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Lazy"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","type":"topic","abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","isActive":true},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"type":"text","text":"create a parser for the given input."}],"title":"Lazy"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/separator":{"type":"topic","kind":"symbol","role":"symbol","abstract":[],"title":"separator","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Separator"}],"url":"\/documentation\/parsing\/many\/separator","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/separator"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/parse(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}],"url":"\/documentation\/parsing\/many\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol","type":"topic","title":"parse(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/terminator":{"kind":"symbol","abstract":[],"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"terminator","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Terminator"}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/terminator","title":"terminator","url":"\/documentation\/parsing\/many\/terminator"},"doc://co.pointfree.Parsing/documentation/Parsing/Many/init(atLeast:atMost:element:separator:terminator:)":{"abstract":[{"type":"text","text":"Initializes a parser that attempts to run the given parser at least and at most the given"},{"type":"text","text":" "},{"type":"text","text":"number of times, accumulating the outputs in an array."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many\/init(atLeast:atMost:element:separator:terminator:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" is "},{"type":"codeVoice","code":"[Element.Output]"},{"type":"text","text":", "},{"type":"codeVoice","code":"Separator"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Terminator"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", "},{"type":"codeVoice","code":"Element.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Separator.Input"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Separator.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Terminator.Input"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/many\/init(atleast:atmost:element:separator:terminator:)","title":"init(atLeast:atMost:element:separator:terminator:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"atLeast"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"atMost"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"element"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Separator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"terminator"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"Terminator"},{"kind":"text","text":")"}]},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"role":"article","url":"\/documentation\/parsing\/uuid","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" value from the beginning of a string."}],"title":"UUID"}}}