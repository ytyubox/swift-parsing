{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"A more well-structured value parsed from the given input.","type":"text"}]}],"kind":"content"},{"parameters":[{"name":"input","content":[{"inlineContent":[{"type":"text","text":"A nebulous, mutable piece of data to be incrementally parsed."}],"type":"paragraph"}]}],"kind":"parameters"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/parse(_:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/parsing\/parsers\/conditional\/parse(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":2},"sections":[],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"metadata":{"role":"symbol","externalID":"s:7Parsing7ParsersO11ConditionalO5parsey6OutputQz5InputQzzKF","symbolKind":"method","modules":[{"name":"Parsing"}],"title":"parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"roleHeading":"Instance Method"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional","role":"symbol","url":"\/documentation\/parsing\/parsers\/conditional","title":"Parsers.Conditional","abstract":[{"text":"A parser that can parse output from two types of parsers.","type":"text"}],"navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","title":"Parsers","kind":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Conditional/parse(_:)":{"type":"topic","title":"parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Conditional\/parse(_:)","url":"\/documentation\/parsing\/parsers\/conditional\/parse(_:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}]}}}