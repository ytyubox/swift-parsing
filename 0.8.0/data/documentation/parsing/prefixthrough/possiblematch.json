{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough"]]},"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":2},"abstract":[{"type":"text","text":"No overview available."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefixthrough\/possiblematch"]}],"metadata":{"externalID":"s:7Parsing13PrefixThroughV13possibleMatchxvp","symbolKind":"property","role":"symbol","roleHeading":"Instance Property","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"possibleMatch","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"modules":[{"name":"Parsing"}],"title":"possibleMatch"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"possibleMatch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Input"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/possibleMatch"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"role":"symbol","url":"\/documentation\/parsing\/prefixthrough","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","type":"topic","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"title":"PrefixThrough"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough/possibleMatch":{"role":"symbol","url":"\/documentation\/parsing\/prefixthrough\/possiblematch","kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"possibleMatch"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Input"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/possibleMatch","type":"topic","abstract":[],"title":"possibleMatch"}}}