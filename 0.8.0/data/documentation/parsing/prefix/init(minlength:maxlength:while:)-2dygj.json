{"kind":"symbol","metadata":{"title":"init(minLength:maxLength:while:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"maxLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":"?, ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"roleHeading":"Initializer","symbolKind":"init","role":"symbol","externalID":"s:7Parsing6PrefixV9minLength03maxD05whileACyxGSi_SiSgSb7ElementQzctcfc","modules":[{"name":"Parsing"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefix\/init(minlength:maxlength:while:)-2dygj"]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix"]]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix\/init(minLength:maxLength:while:)-2dygj","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"minLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":" = 0, ","kind":"text"},{"text":"maxLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":"? = nil, ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The minimum number of elements to consume for parsing to be considered"},{"type":"text","text":" "},{"type":"text","text":"successful."}],"type":"paragraph"}],"name":"minLength"},{"content":[{"inlineContent":[{"text":"The maximum number of elements to consume before the parser will return its","type":"text"},{"text":" ","type":"text"},{"text":"output.","type":"text"}],"type":"paragraph"}],"name":"maxLength"},{"content":[{"inlineContent":[{"text":"A closure that takes an element of the input sequence as its argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the element should be included or ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" if it should be excluded. Once","type":"text"},{"text":" ","type":"text"},{"text":"the predicate returns ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" it will not be called again.","type":"text"}],"type":"paragraph"}],"name":"predicate"}],"kind":"parameters"}],"abstract":[{"text":"Initializes a parser that consumes a subsequence from the beginning of its input.","type":"text"}],"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"kind":"symbol","navigatorTitle":[{"text":"Prefix","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","title":"Prefix","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Prefix","kind":"identifier"}],"url":"\/documentation\/parsing\/prefix","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix/init(minLength:maxLength:while:)-2dygj":{"kind":"symbol","type":"topic","title":"init(minLength:maxLength:while:)","url":"\/documentation\/parsing\/prefix\/init(minlength:maxlength:while:)-2dygj","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix\/init(minLength:maxLength:while:)-2dygj","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxLength","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Initializes a parser that consumes a subsequence from the beginning of its input.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"}}}