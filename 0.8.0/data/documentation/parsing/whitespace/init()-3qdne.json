{"metadata":{"title":"init()","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"externalID":"s:7Parsing10WhitespaceVAAs10ArraySliceVys5UInt8VGRszAHRs_rlEACyA2HGycfc","symbolKind":"init","extendedModule":"Parsing","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" is "},{"code":"ArraySlice<UTF8.CodeUnit>","type":"codeVoice"},{"type":"text","text":"."}]},"modules":[{"name":"Parsing"}],"roleHeading":"Initializer"},"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/whitespace\/init()-3qdne"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":2},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"init","kind":"keyword"},{"text":"()","kind":"text"}],"languages":["swift"]}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace"]]},"abstract":[{"text":"No overview available.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init()-3qdne"},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace/init()-3qdne":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","title":"init()","url":"\/documentation\/parsing\/whitespace\/init()-3qdne","kind":"symbol","role":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace\/init()-3qdne"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"navigatorTitle":[{"kind":"identifier","text":"Whitespace"}],"role":"symbol","url":"\/documentation\/parsing\/whitespace","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Whitespace"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","type":"topic","abstract":[{"type":"text","text":"A parser that consumes all ASCII whitespace from the beginning of the input."}],"title":"Whitespace"}}}