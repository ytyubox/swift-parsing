{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Additional Resources","level":2,"anchor":"Additional-Resources"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","isActive":true,"type":"reference"}],"type":"paragraph"}]}]},{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Parsing with this library is performed by listing out many small parsers that describe how to","type":"text"},{"text":" ","type":"text"},{"text":"incrementally consume small bits from the beginning of an input string. For example, suppose you","type":"text"},{"text":" ","type":"text"},{"text":"have a string that holds some user data that you want to parse into an array of ","type":"text"},{"code":"User","type":"codeVoice"},{"text":"s:","type":"text"}]},{"code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser can be constructed for transforming the input string into an array of users in succinct"},{"type":"text","text":" "},{"type":"text","text":"and fluent API:"}]},{"code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This says that to parse a user we:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Parse and consume an integer from the beginning of the input"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then a comma","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then everything up to the next comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then another comma","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"and finally a boolean."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to parse an entire array of users we:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Run the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" parser many times"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"between each invocation of "},{"type":"codeVoice","code":"user"},{"type":"text","text":" we run the separator parser to consume a newline"}]}]},{"content":[{"inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits"},{"type":"text","text":" "},{"type":"text","text":"an error that describes exactly what went wrong:"}]},{"code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks"},{"type":"text","text":" "},{"type":"text","text":"to learn in order to performantly parse larger inputs."}]}]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":2},"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"seeAlsoSections":[{"abstract":[{"text":"The collecton of videos from ","type":"text"},{"type":"reference","identifier":"https:\/\/www.pointfree.co","isActive":true},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"title":"Related Documentation","identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"]}],"kind":"symbol","topicSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]},{"generated":true,"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]}],"variants":[{"paths":["\/documentation\/parsing"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"module","roleHeading":"Framework","title":"Parsing","modules":[{"name":"Parsing"}],"role":"collection","externalID":"Parsing"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"title":"Design","url":"\/documentation\/parsing\/design","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"url":"\/documentation\/parsing\/stringabstractions","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"title":"String Abstractions","role":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"deprecated":true,"type":"topic","url":"\/documentation\/parsing\/conditional","title":"Conditional","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","title":"Parsers","kind":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/CaseIterable":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CaseIterable","type":"topic","url":"\/documentation\/parsing\/caseiterable","abstract":[{"type":"text","text":"A parser that consumes a case-iterable, raw representable value from the beginning of a string."}],"role":"article","kind":"article","title":"CaseIterable"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value."}],"navigatorTitle":[{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},"https://www.pointfree.co/collections/parsing":{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"link","url":"https:\/\/www.pointfree.co\/collections\/parsing","titleInlineContent":[{"type":"text","text":"Point-Free Videos"}],"title":"Point-Free Videos"},"https://github.com/pointfreeco/swift-parsing/":{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/","type":"link","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/","titleInlineContent":[{"type":"text","text":"GitHub Repo"}],"title":"GitHub Repo"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"title":"Backtracking","url":"\/documentation\/parsing\/backtracking","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"role":"article","type":"topic","url":"\/documentation\/parsing\/gettingstarted","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","title":"Getting Started","abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}]},"https://github.com/pointfreeco/swift-parsing/discussions":{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"link","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","titleInlineContent":[{"type":"text","text":"Discussions"}],"title":"Discussions"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"title":"Error messages","url":"\/documentation\/parsing\/errormessages","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages"}}}