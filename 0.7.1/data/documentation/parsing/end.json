{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","preciseIdentifier":"s:Sl"}]}]},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Useful as a final parser in a long sequence of parsers to guarantee that all input has been","type":"text"},{"text":" ","type":"text"},{"text":"consumed.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let parser = Parse {","  \"Hello, \"","  Prefix { $0 != \"!\" }","  \"!\"","  End()  \/\/ NB: All input should be consumed.","}","","var input = \"Hello, Blob!\"[...]","try parser.parse(&input)  \/\/ \"Blob\""],"type":"codeListing"},{"inlineContent":[{"text":"This parser will fail if there are input elements that have not been consumed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["input = \"Hello, Blob!!\"","try parser.parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:13","\/\/ 1 | Hello, Blob!!","\/\/   |             ^ expected end of input"],"type":"codeListing"}],"kind":"content"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"major":0,"minor":2,"patch":0},"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","navigatorTitle":[{"text":"End","kind":"identifier"}],"role":"symbol","title":"End","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing3EndV"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()-2egll","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()-7gmzt","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()-8lvil"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/Parser-Implementations"],"generated":true,"title":"Default Implementations"}],"abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/end"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/End/init()-7gmzt":{"url":"\/documentation\/parsing\/end\/init()-7gmzt","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()-7gmzt","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"title":"init()","kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"End","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","title":"End","url":"\/documentation\/parsing\/end"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","title":"Parser","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" value into an ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" value.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.Parsing/documentation/Parsing/End/parse(_:)":{"type":"topic","url":"\/documentation\/parsing\/end\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}],"role":"symbol","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/End/init()-2egll":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()-2egll","type":"topic","url":"\/documentation\/parsing\/end\/init()-2egll","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","role":"symbol","abstract":[],"title":"init()","fragments":[{"kind":"identifier","text":"init"},{"text":"()","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/End/init()-8lvil":{"title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/init()-8lvil","role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/end\/init()-8lvil","type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/End/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End\/Parser-Implementations","url":"\/documentation\/parsing\/end\/parser-implementations","kind":"article","abstract":[],"title":"Parser Implementations","type":"topic","role":"collectionGroup"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[],"kind":"symbol","type":"topic","title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","role":"collection","url":"\/documentation\/parsing"}}}