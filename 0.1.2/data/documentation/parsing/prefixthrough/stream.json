{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/prefixthrough\/stream"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/Parser-Implementations"]]},"metadata":{"title":"stream","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing13PrefixThroughV","roleHeading":"Instance Property","symbolKind":"property","extendedModule":"Parsing","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}]}},"schemaVersion":{"minor":2,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","text":"Stream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"For example, the following parser can parse an integer followed by a newline from a collection","type":"text"},{"text":" ","type":"text"},{"text":"of UTF8 bytes:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"],"syntax":null},{"inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}],"type":"paragraph"},{"type":"codeListing","code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"],"syntax":null},{"inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"],"syntax":null}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/stream"},"abstract":[{"type":"text","text":"Transforms the receiver parser into one that can parse streams of input."}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing","type":"topic","url":"\/documentation\/parsing","role":"collection","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","title":"Parsers","type":"topic","url":"\/documentation\/parsing\/parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough/stream":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier","text":"Stream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/stream","conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","url":"\/documentation\/parsing\/prefixthrough\/stream","kind":"symbol","role":"symbol","title":"stream","abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough/Parser-Implementations":{"abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough\/Parser-Implementations","title":"Parser Implementations","url":"\/documentation\/parsing\/prefixthrough\/parser-implementations","kind":"article","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"navigatorTitle":[{"kind":"identifier","text":"PrefixThrough"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixThrough"}],"abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","title":"PrefixThrough","url":"\/documentation\/parsing\/prefixthrough","kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"type":"topic","title":"Parsers.Stream","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Stream"}],"url":"\/documentation\/parsing\/parsers\/stream"}}}