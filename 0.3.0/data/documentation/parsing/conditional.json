{"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"First"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Second"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":", ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"},{"text":", ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"First","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Second","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This parser is useful for situations where you want to run one of two different parsers based on"},{"type":"text","text":" "},{"type":"text","text":"a condition, which typically would force you to perform "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/eraseToAnyParser()","isActive":true},{"type":"text","text":" and incur"},{"type":"text","text":" "},{"type":"text","text":"a performance penalty."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, you can use this parser in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)"},{"type":"text","text":" operation to use the parsed"},{"type":"text","text":" "},{"type":"text","text":"output to determine what parser to run next:"}],"type":"paragraph"},{"code":["versionParser.flatMap { version in","  version == \"2.0\"","    ? Conditional.first(V2Parser())","    : Conditional.second(LegacyParser())","}"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"metadata":{"title":"Conditional","symbolKind":"enum","roleHeading":"Enumeration","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"role":"symbol","modules":[{"name":"Parsing"}],"navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"externalID":"s:7Parsing11ConditionalO"},"abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"schemaVersion":{"patch":0,"major":0,"minor":2},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]}],"variants":[{"paths":["\/documentation\/parsing\/conditional"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/first(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/second(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/Parser-Implementations"]}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","url":"\/documentation\/parsing","type":"topic","role":"collection","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"role":"symbol","url":"\/documentation\/parsing\/conditional","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","title":"Conditional","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"abstract":[{"type":"text","text":"A parser that can parse output from two types of parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/eraseToAnyParser()":{"url":"\/documentation\/parsing\/parser\/erasetoanyparser()","role":"symbol","type":"topic","abstract":[{"text":"Wraps this parser with a type eraser.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/eraseToAnyParser()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing9AnyParserV","text":"AnyParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"title":"eraseToAnyParser()","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/second(_:)":{"url":"\/documentation\/parsing\/conditional\/second(_:)","role":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/second(_:)","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"second"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":")"}],"title":"Conditional.second(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/parse(_:)":{"url":"\/documentation\/parsing\/conditional\/parse(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?"}],"title":"parse(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/flatMap(_:)":{"url":"\/documentation\/parsing\/parser\/flatmap(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser into a new parser."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/flatMap(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewParser"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewParser"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO7FlatMapV","kind":"typeIdentifier","text":"FlatMap"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewParser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"title":"flatMap(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/first(_:)":{"url":"\/documentation\/parsing\/conditional\/first(_:)","role":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/first(_:)","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":")"}],"title":"Conditional.first(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser","title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/Parser-Implementations":{"role":"collectionGroup","url":"\/documentation\/parsing\/conditional\/parser-implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/Parser-Implementations","title":"Parser Implementations","type":"topic","abstract":[]}}}