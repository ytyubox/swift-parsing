{"sections":[],"metadata":{"title":"StartsWith","modules":[{"name":"Parsing"}],"roleHeading":"Structure","externalID":"s:7Parsing10StartsWithV","symbolKind":"struct","navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"StartsWith","kind":"identifier"}]},"kind":"symbol","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StartsWith"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This parser is named after "},{"type":"codeVoice","code":"Sequence.starts(with:)"},{"type":"text","text":", and tests that the input it is parsing"},{"type":"text","text":" "},{"type":"text","text":"starts with a given subsequence by calling this method under the hood."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If "},{"code":"true","type":"codeVoice"},{"type":"text","text":", it consumes this prefix and returns "},{"code":"Void","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["StartsWith(\"Hello, \").parse(\"Hello, Blob!\"[...]) \/\/ (output: (), rest: \"Blob!\")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", it fails and leaves input intact:"}],"type":"paragraph"},{"syntax":"swift","code":["StartsWith(\"Hello, \").parse(\"Goodnight, Blob!\"[...]) \/\/ (output: nil, rest: \"Goodnight, Blob!\")"],"type":"codeListing"},{"inlineContent":[{"text":"This parser returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" and ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" the sequence of elements it consumes because the sequence","type":"text"},{"text":" ","type":"text"},{"text":"is already known at the time the parser is created (it is the value quite literally passed to","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","isActive":true,"type":"reference"},{"text":"). This means ","type":"text"},{"code":"StartsWith","type":"codeVoice"},{"text":" plays nicely when chained into the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/take(_:)-1fw8y","isActive":true,"type":"reference"},{"text":" operation, which will discard the ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" output.","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","type":"conformsTo"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/startswith"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","interfaceLanguage":"swift"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/count","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/possiblePrefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/startsWith"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/Parser-Implementations"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Input.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Input.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Initializes a parser that successfully returns ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" when the initial elements of its input","type":"text"},{"text":" ","type":"text"},{"text":"are equivalent to the elements in another sequence.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:)","url":"\/documentation\/parsing\/startswith\/init(_:)","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/startsWith":{"title":"startsWith","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"startsWith"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol","abstract":[],"role":"symbol","url":"\/documentation\/parsing\/startswith\/startswith","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/startsWith","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/count":{"title":"count","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/count","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/startswith\/count","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/possiblePrefix":{"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/possiblePrefix","role":"symbol","url":"\/documentation\/parsing\/startswith\/possibleprefix","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"possiblePrefix","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AnyCollection","kind":"typeIdentifier","preciseIdentifier":"s:s13AnyCollectionV"},{"text":"<","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","title":"possiblePrefix"},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","url":"\/documentation\/parsing","type":"topic","role":"collection","abstract":[],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"role":"symbol","title":"parse(_:)","type":"topic","url":"\/documentation\/parsing\/startswith\/parse(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/init(_:by:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/init(_:by:)","title":"init(_:by:)","abstract":[{"text":"Initializes a parser that successfully returns ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" when the initial elements of its input","type":"text"},{"text":" ","type":"text"},{"text":"are equivalent to the elements in another sequence, using the given predicate as the","type":"text"},{"text":" ","type":"text"},{"text":"equivalence test.","type":"text"}],"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/parsing\/startswith\/init(_:by:)"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith/Parser-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith\/Parser-Implementations","title":"Parser Implementations","url":"\/documentation\/parsing\/startswith\/parser-implementations","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"type":"topic","role":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser","title":"Parser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/take(_:)-1fw8y":{"type":"topic","title":"take(_:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO9SkipFirstV","text":"SkipFirst","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/take(_:)-1fw8y","abstract":[{"text":"Returns a parser that runs this parser and the given parser, taking only the output of the","type":"text"},{"text":" ","type":"text"},{"text":"given parser.","type":"text"}],"url":"\/documentation\/parsing\/parser\/take(_:)-1fw8y"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","title":"StartsWith","abstract":[{"type":"text","text":"A parser that parses a sequence of elements from its input."}],"type":"topic","navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}],"url":"\/documentation\/parsing\/startswith"}}}