{"metadata":{"roleHeading":"Structure","externalID":"s:7Parsing13FromSubstringV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"}],"title":"FromSubstring","modules":[{"name":"Parsing"}],"symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"FromSubstring"}],"role":"symbol"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-1o4e0","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-4m4bp","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-5n0la","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(upstream:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/fromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/substringParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/toSubstring"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/Parser-Implementations"],"generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" into a parser on another view."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/fromsubstring"]}],"sections":[],"schemaVersion":{"minor":2,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromSubstring"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"SubstringParser"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SubstringParser"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","text":"Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SubstringParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"FromSubstring","type":"codeVoice"},{"text":" operator allows you to mix and match representation levels of strings","type":"text"},{"text":" ","type":"text"},{"text":"so that you can maximize how much you parse on the faster, but more complex, lower level","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"representations and then switch to slower, but safer, higher level representations for"},{"type":"text","text":" "},{"type":"text","text":"when you need that power."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, to parse “café” as a collection of UTF8 code units you must be careful to parse"},{"type":"text","text":" "},{"type":"text","text":"both representations of “é”:"}]},{"code":["OneOf {","  \"caf\\u{00E9}\".utf8  \/\/ LATIN SMALL LETTER E WITH ACUTE","  \"cafe\\u{0301}\".utf8 \/\/ E + COMBINING ACUTE ACCENT","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, you can parse the ASCII characters of “caf” as UTF8 code units, and then","type":"text"},{"text":" ","type":"text"},{"text":"switch to the higher level substring representation to parse “é” so that you don’t have","type":"text"},{"text":" ","type":"text"},{"text":"to worry about UTF8 normalization:","type":"text"}]},{"code":["Parse {","  \"caf\".utf8","","  \/\/ Parse any recognized \"é\" character, including:","  \/\/   - LATIN SMALL LETTER E WITH ACUTE (\"\\u{00E9}\")","  \/\/   - E + COMBINING ACUTE ACCENT (\"e\\u{0301}\")","  FromSubstring { \"é\" }","}"],"type":"codeListing","syntax":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","url":"\/documentation\/parsing","type":"topic","kind":"symbol","abstract":[],"role":"collection"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/substringParser":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"substringParser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubstringParser"}],"url":"\/documentation\/parsing\/fromsubstring\/substringparser","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/substringParser","title":"substringParser"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/init(_:)-1o4e0":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"SubstringParser"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UnicodeScalarView"},{"type":"text","text":", "},{"type":"codeVoice","code":"SubstringParser"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", and "},{"type":"codeVoice","code":"SubstringParser.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/parsing\/fromsubstring\/init(_:)-1o4e0","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-1o4e0","title":"init(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/init(upstream:)":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"upstream"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SubstringParser"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring.UTF8View"},{"text":", ","type":"text"},{"type":"codeVoice","code":"SubstringParser"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"SubstringParser.Input"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/parsing\/fromsubstring\/init(upstream:)","type":"topic","deprecated":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(upstream:)","title":"init(upstream:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can parse an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"title":"FromSubstring","role":"symbol","type":"topic","url":"\/documentation\/parsing\/fromsubstring","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FromSubstring","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":" into a parser on another view."}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/Parser-Implementations":{"title":"Parser Implementations","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/Parser-Implementations","role":"collectionGroup","abstract":[],"url":"\/documentation\/parsing\/fromsubstring\/parser-implementations","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/init(_:)-5n0la":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"SubstringParser","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UInt8>"},{"type":"text","text":", "},{"type":"codeVoice","code":"SubstringParser"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", and "},{"type":"codeVoice","code":"SubstringParser.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/fromsubstring\/init(_:)-5n0la","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-5n0la","title":"init(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/toSubstring":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toSubstring","kind":"identifier"},{"text":": (","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"}],"url":"\/documentation\/parsing\/fromsubstring\/tosubstring","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/toSubstring","title":"toSubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/parse(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SubstringParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?"}],"url":"\/documentation\/parsing\/fromsubstring\/parse(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/parse(_:)","title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/fromSubstring":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fromSubstring","kind":"identifier"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:Ss","text":"Substring","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"}],"url":"\/documentation\/parsing\/fromsubstring\/fromsubstring","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/fromSubstring","title":"fromSubstring"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring/init(_:)-4m4bp":{"kind":"symbol","abstract":[],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"SubstringParser","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":", "},{"type":"codeVoice","code":"SubstringParser"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":", and "},{"type":"codeVoice","code":"SubstringParser.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/fromsubstring\/init(_:)-4m4bp","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring\/init(_:)-4m4bp","title":"init(_:)"}}}