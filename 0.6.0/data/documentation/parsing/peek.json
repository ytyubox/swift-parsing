{"metadata":{"title":"Peek","symbolKind":"struct","externalID":"s:7Parsing4PeekV","role":"symbol","roleHeading":"Structure","navigatorTitle":[{"text":"Peek","kind":"identifier"}],"modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"}]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Peek","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Upstream"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Upstream"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"It lets you “peek” to see what output the parser would parse."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, identifiers (variables, functions, etc.) in Swift allow the first character to be a"},{"type":"text","text":" "},{"type":"text","text":"letter or underscore, but not a digit, but subsequent characters can be digits. "},{"type":"emphasis","inlineContent":[{"text":"E.g.","type":"text"}]},{"type":"text","text":", "},{"type":"codeVoice","code":"foo123"},{"type":"text","text":" "},{"type":"text","text":"is a valid identifier, but "},{"type":"codeVoice","code":"123foo"},{"type":"text","text":" is not. We can create an identifier parser by using "},{"type":"codeVoice","code":"Peek"},{"type":"text","text":" "},{"type":"text","text":"to first check if the input starts with a letter or underscore, and if it does, return the"},{"type":"text","text":" "},{"type":"text","text":"remainder of the input up to the first character that is not a letter, a digit, or an"},{"type":"text","text":" "},{"type":"text","text":"underscore."}],"type":"paragraph"},{"code":["let identifier = Parse {","  Skip {","    Peek { Prefix(1) { $0.isLetter || $0 == \"_\" } }","  }","  Prefix { $0.isNumber || $0.isLetter || $0 == \"_\" }","}"],"type":"codeListing","syntax":"swift"}]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/upstream"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/Parser-Implementations"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/peek"]}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships"}],"schemaVersion":{"minor":2,"major":0,"patch":0},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"abstract":[{"text":"A parser that runs the given parser, but does not consume any input.","type":"text"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Peek/Parser-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","title":"Parser Implementations","url":"\/documentation\/parsing\/peek\/parser-implementations","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/parse(_:)":{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/parse(_:)","title":"parse(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/peek\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Peek"}],"title":"Peek","url":"\/documentation\/parsing\/peek","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"abstract":[{"type":"text","text":"Declares a type that can parse an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/init(_:)":{"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/init(_:)","url":"\/documentation\/parsing\/peek\/init(_:)","role":"symbol","title":"init(_:)","kind":"symbol","abstract":[{"text":"Construct a parser that runs the given parser, but does not consume any input.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Peek/upstream":{"type":"topic","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"upstream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Upstream","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek\/upstream","url":"\/documentation\/parsing\/peek\/upstream","role":"symbol","title":"upstream","kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","url":"\/documentation\/parsing","type":"topic","kind":"symbol","abstract":[],"role":"collection"}}}